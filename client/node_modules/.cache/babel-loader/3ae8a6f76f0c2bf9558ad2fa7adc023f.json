{"ast":null,"code":"import _objectSpread from \"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\MONASH BOOTCAMP\\\\YW_Amthlete-App\\\\amthlete-app\\\\client\\\\src\\\\pages\\\\Competitions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport DatePicker from \"react-date-picker\";\nimport { useField, splitFormProps } from \"react-form\";\n\nfunction Competitions() {\n  _s();\n\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      competitions = _useState2[0],\n      setCompetitions = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(() => {\n    loadCompetitions();\n  }, []); // Loads all books and sets them to books\n\n  function loadCompetitions() {\n    API.getCompetitions().then(res => setCompetitions(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteCompetition(id) {\n    API.deleteCompetition(id).then(res => loadCompetitions()).catch(err => console.log(err));\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    }));\n  }\n\n  ; // When the form is submitted, use the API.saveCompetition method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.eventName && formObject.horse) {\n      API.saveCompetition({\n        eventName: formObject.eventName,\n        eventType: formObject.eventType,\n        horse: formObject.horse,\n        disciplines: formObject.disciplines,\n        penalties: formObject.penalties,\n        place: formObject.place,\n        images: formObject.images,\n        resultNotes: formObject.resultNotes,\n        date: formObject.date\n      }).then(res => loadCompetitions()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"What Competitions Should I Enter?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"eventName\",\n            placeholder: \"EventName (required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              name: \"eventType\",\n              children: [\"Event Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                defaultValue: this.state.selectValue,\n                onChange: this.handleChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dressage\",\n                  children: \"Dressage\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"showJumping\",\n                  children: \"Show Jumping\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"showing\",\n                  children: \"Showing\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"horseTrials\",\n                  children: \"Horse Trials\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"combinedTraining\",\n                  children: \"Combined Training\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"horse\",\n            placeholder: \"Horse (required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"resultNotes\",\n            placeholder: \"ResultNotes (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n            disabled: !(formObject.eventName && formObject.horse),\n            onClick: handleFormSubmit,\n            children: \"Submit Competition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6 sm-12\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Competitions On My List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), competitions.length ? /*#__PURE__*/_jsxDEV(List, {\n          children: competitions.map(competition => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/competitions/\" + competition._id,\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [competition.eventName, \" with \", competition.horse]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(DeleteBtn, {\n              onClick: () => deleteCompetition(competition._id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }, this)]\n          }, competition._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No Results to Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n} // end Competitions function\n\n\n_s(Competitions, \"fXLWOaiWJ2xAhHMpcZb2NS/L1GE=\");\n\n_c = Competitions;\nexport default Competitions; // const Example = () => {\n//   const [startDate, setStartDate] = useState(new Date());\n//   return (\n//     <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n//   );\n// };\n// function handleFormSubmit(event) {\n//   event.preventDefault();\n//   if (formObject.eventName && formObject.horse) {\n//       API.saveCompetition({\n//               eventName: formObject.eventName,\n//               eventType: formObject.eventType,\n//               horse: formObject.horse,\n//               disciplines: formObject.disciplines,\n//               penalties: formObject.penalties,\n//               place: formObject.place,\n//               images: formObject.images,\n//               resultNotes: formObject.resultNotes,\n//               date: formObject.date\n//           })\n//           .then(res => loadCompetitions())\n//           .catch(err => console.log(err));\n//   }\n// };\n// // save competition data function end\n// function SelectField(props) {\n//   const [field, fieldOptions, { options, ...rest }] = splitFormProps(props);\n//   const {\n//     value = \"\",\n//     setValue,\n//     meta: { error, isTouched }\n//   } = useField(field, fieldOptions);\n//   const handleSelectChange = e => {\n//     setValue(e.target.value);\n//   };\n//   return (\n//     <>\n//       <select {...rest} value={value} onChange={handleSelectChange}>\n//         <option disabled value=\"\" />\n//         {options.map(option => (\n//           <option key={option} value={option}>\n//             {option}\n//           </option>\n//         ))}\n//       </select>{\" \"}\n//       {isTouched && error ? <em>{error}</em> : null}\n//     </>\n//   );\n// }\n//   // function SelectField end\n//   function Competitions() {\n//     // Setting our component's initial state\n//     const [competitions, setCompetitions] = useState([])\n//     const [formObject, setFormObject] = useState({})\n//     // Load all competitions and store them with setCompetitions\n//     useEffect(() => {\n//         loadCompetitions()\n//     }, [])\n//     // Loads all competitions and sets them to competitions\n//     function loadCompetitions() {\n//         API.getCompetitions()\n//             .then(res =>\n//                 setCompetitions(res.data)\n//             )\n//             .catch(err => console.log(err));\n//     };\n//     // function load all competitions end\n//     // Deletes a competition from the database with a given id, then reloads competitions from the db\n//     function deleteCompetition(id) {\n//         API.deleteCompetition(id)\n//             .then(res => loadCompetitions())\n//             .catch(err => console.log(err));\n//     }\n//     // delete competitions function end\n//     // Handles updating component state when the user types into the input field\n//     function handleInputChange(event) {\n//         const {\n//             name,\n//             value\n//         } = event.target;\n//         setFormObject({\n//             ...formObject,\n//             [name]: value\n//         })\n//     };\n//     // input change function end\n//     // When the form is submitted, use the API.saveCompetition method to save the competition data\n//     // Then reload competitions from the database\n//     class NameForm extends React.Component {\n//       constructor(props) {\n//         super(props);\n//         this.state = {value: ''};\n//         this.handleChange = this.handleChange.bind(this);\n//         this.handleSubmit = this.handleSubmit.bind(this);\n//       }\n//       handleChange(event) {\n//         this.setState({value: event.target.value});\n//       }\n//       handleSubmit(event) {\n//         alert('A name was submitted: ' + this.state.value);\n//         event.preventDefault();\n//       }\n//       render() {\n//         return (\n//             {/* <label>\n//               Name:\n//               <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n//             </label>\n//             <input type=\"submit\" value=\"Submit\" />\n//           </form>\n//         );\n//       }\n//     }\n//    return (\n//     <form onSubmit={handleSubmit}> */}\n//       <Container fluid>\n//         <Row>\n//           <Col size = \"md-6\" >\n//             <Jumbotron>\n//               <h1>What Competitions Should I Enter?</h1> \n//             </Jumbotron> \n//             <form onSubmit={this.handleSubmit}></form>\n//               <Input \n//                 onChange={handleInputChange}\n//                 name=\"eventName\" \n//                 placeholder=\"EventName (required)\" \n//               />\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"horse\"\n//                 placeholder=\"Horse (required)\" \n//               />\n//               <label> \n//                 Event Type: {\" \"} \n//                 <SelectField \n//                   field= \"eventType\"\n//                   options= {[\"Dressage\", \"Show Jumping\", \"Showing\", \"Horse Trials\", \"Combined Training\"]}\n//                   validate = {value => (!value ? \"This is required!\" : false)}\n//                 />\n//               </label>\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"penalties\"\n//                 placeholder=\"penalties (optional)\" \n//               />\n//               <label> \n//                 Place: {\" \"} \n//                 <SelectField \n//                   field= \"place\"\n//                   options= {[\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"NIL\"]}\n//                 />\n//               </label>\n//               <Input onChange = {handleInputChange}\n//                 name = \"images\" placeholder = \"upload images (Optional)\" />\n//               <TextArea onChange = {handleInputChange}\n//                 name = \"resultNotes\" placeholder = \"ResultNotes (Optional)\" />\n//               <DatePicker />\n//               </form>\n//               <FormBtn onClick={() => handleFormSubmit} />\n//             );\n//             </Col>\n//             <Col size=\"md-6 sm-12\">\n//               <Jumbotron>\n//                 <h1>Competitions On My List</h1>\n//               </Jumbotron>\n//               {competitions.length ? (\n//                 <List>\n//                   {competitions.map(competition => (\n//                     <ListItem key={competition._id}>\n//                       <Link to={\"/competitions/\" + competition._id}>\n//                         <strong>\n//                           {competition.eventName} with {competition.horse}\n//                         </strong>\n//                       </Link>\n//                       <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\n//                     </ListItem>\n//                   ))}\n//                 </List>\n//               ) : (\n//                 <h3>No Results to Display</h3>\n//               )}\n//         </Col>\n//       </Row>\n//     </Container>\n//       );\n//   }\n// export default Competitions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Competitions\");","map":{"version":3,"sources":["C:/MONASH BOOTCAMP/YW_Amthlete-App/amthlete-app/client/src/pages/Competitions.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","DatePicker","useField","splitFormProps","Competitions","competitions","setCompetitions","formObject","setFormObject","loadCompetitions","getCompetitions","then","res","data","catch","err","console","log","deleteCompetition","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","eventName","horse","saveCompetition","eventType","disciplines","penalties","place","images","resultNotes","date","state","selectValue","handleChange","message","length","map","competition","_id"],"mappings":"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":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport DatePicker from \"react-date-picker\";\nimport { useField, splitFormProps } from \"react-form\";\n\nfunction Competitions() {\n  // Setting our component's initial state\n  const [competitions, setCompetitions] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadCompetitions()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadCompetitions() {\n    API.getCompetitions()\n      .then(res => \n        setCompetitions(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteCompetition(id) {\n    API.deleteCompetition(id)\n      .then(res => loadCompetitions())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveCompetition method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  if (formObject.eventName && formObject.horse) {\n      API.saveCompetition({\n              eventName: formObject.eventName,\n              eventType: formObject.eventType,\n              horse: formObject.horse,\n              disciplines: formObject.disciplines,\n              penalties: formObject.penalties,\n              place: formObject.place,\n              images: formObject.images,\n              resultNotes: formObject.resultNotes,\n              date: formObject.date\n          })\n          .then(res => loadCompetitions())\n          .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Competitions Should I Enter?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"eventName\"\n                placeholder=\"EventName (required)\"\n              />\n\n          <div>\n          <label name = \"eventType\"> \n              Event Type:\n          <select defaultValue={this.state.selectValue} \n          onChange={this.handleChange} \n          >\n                  <option value=\"dressage\">Dressage</option>\n                  <option value=\"showJumping\">Show Jumping</option>\n                  <option value=\"showing\">Showing</option>\n                  <option value=\"horseTrials\">Horse Trials</option>\n                  <option value=\"combinedTraining\">Combined Training</option> \n            </select>\n            <p>{message}</p>\n            </label> \n            </div>  \n\n             <Input\n                onChange={handleInputChange}\n                name=\"horse\"\n                placeholder=\"Horse (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"resultNotes\"\n                placeholder=\"ResultNotes (Optional)\"\n              />\n              <FormBtn\n                disabled={!(formObject.eventName && formObject.horse)}\n                onClick={handleFormSubmit}\n              >\n                Submit Competition\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Competitions On My List</h1>\n            </Jumbotron>\n            {competitions.length ? (\n              <List>\n                {competitions.map(competition => (\n                  <ListItem key={competition._id}>\n                    <Link to={\"/competitions/\" + competition._id}>\n                      <strong>\n                        {competition.eventName} with {competition.horse}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n  // end Competitions function\n\n\nexport default Competitions;\n\n\n\n\n\n\n// const Example = () => {\n//   const [startDate, setStartDate] = useState(new Date());\n//   return (\n//     <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n//   );\n// };\n\n    \n// function handleFormSubmit(event) {\n//   event.preventDefault();\n//   if (formObject.eventName && formObject.horse) {\n//       API.saveCompetition({\n//               eventName: formObject.eventName,\n//               eventType: formObject.eventType,\n//               horse: formObject.horse,\n//               disciplines: formObject.disciplines,\n//               penalties: formObject.penalties,\n//               place: formObject.place,\n//               images: formObject.images,\n//               resultNotes: formObject.resultNotes,\n//               date: formObject.date\n//           })\n//           .then(res => loadCompetitions())\n//           .catch(err => console.log(err));\n//   }\n// };\n// // save competition data function end\n\n// function SelectField(props) {\n//   const [field, fieldOptions, { options, ...rest }] = splitFormProps(props);\n\n//   const {\n//     value = \"\",\n//     setValue,\n//     meta: { error, isTouched }\n//   } = useField(field, fieldOptions);\n\n//   const handleSelectChange = e => {\n//     setValue(e.target.value);\n//   };\n\n//   return (\n//     <>\n//       <select {...rest} value={value} onChange={handleSelectChange}>\n//         <option disabled value=\"\" />\n//         {options.map(option => (\n//           <option key={option} value={option}>\n//             {option}\n//           </option>\n//         ))}\n//       </select>{\" \"}\n//       {isTouched && error ? <em>{error}</em> : null}\n//     </>\n//   );\n// }\n//   // function SelectField end\n\n//   function Competitions() {\n//     // Setting our component's initial state\n//     const [competitions, setCompetitions] = useState([])\n//     const [formObject, setFormObject] = useState({})\n\n//     // Load all competitions and store them with setCompetitions\n//     useEffect(() => {\n//         loadCompetitions()\n//     }, [])\n\n//     // Loads all competitions and sets them to competitions\n//     function loadCompetitions() {\n//         API.getCompetitions()\n//             .then(res =>\n//                 setCompetitions(res.data)\n//             )\n//             .catch(err => console.log(err));\n//     };\n//     // function load all competitions end\n\n//     // Deletes a competition from the database with a given id, then reloads competitions from the db\n//     function deleteCompetition(id) {\n//         API.deleteCompetition(id)\n//             .then(res => loadCompetitions())\n//             .catch(err => console.log(err));\n//     }\n//     // delete competitions function end\n\n//     // Handles updating component state when the user types into the input field\n//     function handleInputChange(event) {\n//         const {\n//             name,\n//             value\n//         } = event.target;\n//         setFormObject({\n//             ...formObject,\n//             [name]: value\n//         })\n//     };\n//     // input change function end\n\n//     // When the form is submitted, use the API.saveCompetition method to save the competition data\n//     // Then reload competitions from the database\n    \n\n//     class NameForm extends React.Component {\n//       constructor(props) {\n//         super(props);\n//         this.state = {value: ''};\n    \n//         this.handleChange = this.handleChange.bind(this);\n//         this.handleSubmit = this.handleSubmit.bind(this);\n//       }\n    \n//       handleChange(event) {\n//         this.setState({value: event.target.value});\n//       }\n    \n//       handleSubmit(event) {\n//         alert('A name was submitted: ' + this.state.value);\n//         event.preventDefault();\n//       }\n\n      \n    \n//       render() {\n//         return (\n          \n//             {/* <label>\n//               Name:\n//               <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n//             </label>\n//             <input type=\"submit\" value=\"Submit\" />\n//           </form>\n//         );\n//       }\n//     }\n\n\n//    return (\n//     <form onSubmit={handleSubmit}> */}\n//       <Container fluid>\n//         <Row>\n//           <Col size = \"md-6\" >\n//             <Jumbotron>\n//               <h1>What Competitions Should I Enter?</h1> \n//             </Jumbotron> \n\n//             <form onSubmit={this.handleSubmit}></form>\n                                \n//               <Input \n//                 onChange={handleInputChange}\n//                 name=\"eventName\" \n//                 placeholder=\"EventName (required)\" \n//               />\n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"horse\"\n//                 placeholder=\"Horse (required)\" \n//               />\n            \n//               <label> \n//                 Event Type: {\" \"} \n//                 <SelectField \n//                   field= \"eventType\"\n//                   options= {[\"Dressage\", \"Show Jumping\", \"Showing\", \"Horse Trials\", \"Combined Training\"]}\n//                   validate = {value => (!value ? \"This is required!\" : false)}\n//                 />\n//               </label>\n            \n//               <Input\n//                 onChange={handleInputChange}\n//                 name=\"penalties\"\n//                 placeholder=\"penalties (optional)\" \n//               />\n              \n//               <label> \n//                 Place: {\" \"} \n//                 <SelectField \n//                   field= \"place\"\n//                   options= {[\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"NIL\"]}\n//                 />\n//               </label>\n\n//               <Input onChange = {handleInputChange}\n//                 name = \"images\" placeholder = \"upload images (Optional)\" />\n\n//               <TextArea onChange = {handleInputChange}\n//                 name = \"resultNotes\" placeholder = \"ResultNotes (Optional)\" />\n        \n           \n//               <DatePicker />\n\n//               </form>\n\n//               <FormBtn onClick={() => handleFormSubmit} />\n          \n//             );\n\n//             </Col>\n\n//             <Col size=\"md-6 sm-12\">\n//               <Jumbotron>\n//                 <h1>Competitions On My List</h1>\n//               </Jumbotron>\n//               {competitions.length ? (\n//                 <List>\n//                   {competitions.map(competition => (\n//                     <ListItem key={competition._id}>\n//                       <Link to={\"/competitions/\" + competition._id}>\n//                         <strong>\n//                           {competition.eventName} with {competition.horse}\n//                         </strong>\n//                       </Link>\n//                       <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\n//                     </ListItem>\n//                   ))}\n//                 </List>\n//               ) : (\n//                 <h3>No Results to Display</h3>\n//               )}\n//         </Col>\n//       </Row>\n//     </Container>\n    \n//       );\n    \n//   }\n\n  \n// export default Competitions;"]},"metadata":{},"sourceType":"module"}