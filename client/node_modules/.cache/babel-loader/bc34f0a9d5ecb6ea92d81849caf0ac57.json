{"ast":null,"code":"import _objectSpread from \"C:\\\\MONASH BOOTCAMP\\\\YW_Amthlete-App\\\\amthlete-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\MONASH BOOTCAMP\\\\YW_Amthlete-App\\\\amthlete-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\MONASH BOOTCAMP\\\\YW_Amthlete-App\\\\amthlete-app\\\\client\\\\src\\\\pages\\\\Competitions.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\"; // import DatePicker from \"react-date-picker\";\n\nimport Select from 'react-select';\nvar eventTypeOptions = [{\n  value: 'dressage',\n  label: 'Dressage'\n}, {\n  value: 'showJumping',\n  label: 'Show Jumping'\n}, {\n  value: 'showing',\n  label: 'Showing'\n}, {\n  value: 'horseTrials',\n  label: 'Horse Trials'\n}, {\n  value: 'combinedTraining',\n  label: 'Combined Training'\n}];\n\nfunction Competitions() {\n  var _this = this;\n\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      competitions = _useState2[0],\n      setCompetitions = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadCompetitions();\n  }, []); // Loads all books and sets them to books\n\n  function loadCompetitions() {\n    API.getCompetitions().then(function (res) {\n      return setCompetitions(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteCompetition(id) {\n    API.deleteCompetition(id).then(function (res) {\n      return loadCompetitions();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    }));\n  }\n\n  ; // When the form is submitted, use the API.saveCompetition method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.eventName && formObject.horse) {\n      API.saveCompetition({\n        eventName: formObject.eventName,\n        eventType: formObject.eventType,\n        horse: formObject.horse,\n        disciplines: formObject.disciplines,\n        penalties: formObject.penalties,\n        place: formObject.place,\n        images: formObject.images,\n        resultNotes: formObject.resultNotes,\n        date: formObject.date\n      }).then(function (res) {\n        return loadCompetitions();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, \"What Competitions Should I Enter?\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"eventName\",\n    placeholder: \"EventName (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }), \"Event Type:\", /*#__PURE__*/React.createElement(Select, {\n    onClick: handleInputChange,\n    name: \"eventType\",\n    placeholder: \"EventType (required)\",\n    options: eventTypeOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"horse\",\n    placeholder: \"Horse (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: handleInputChange,\n    name: \"resultNotes\",\n    placeholder: \"ResultNotes (Optional)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.eventName && formObject.horse),\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, \"Submit Competition\"))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, \"Competitions On My List\")), competitions.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, competitions.map(function (competition) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: competition._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/competitions/\" + competition._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 23\n      }\n    }, competition.eventName, \" with \", competition.horse)), /*#__PURE__*/React.createElement(DeleteBtn, {\n      onClick: function onClick() {\n        return deleteCompetition(competition._id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }));\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n} // end Competitions function\n\n\nexport default Competitions;","map":{"version":3,"sources":["C:/MONASH BOOTCAMP/YW_Amthlete-App/amthlete-app/client/src/pages/Competitions.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Select","eventTypeOptions","value","label","Competitions","competitions","setCompetitions","formObject","setFormObject","loadCompetitions","getCompetitions","then","res","data","catch","err","console","log","deleteCompetition","id","handleInputChange","event","target","name","handleFormSubmit","preventDefault","eventName","horse","saveCompetition","eventType","disciplines","penalties","place","images","resultNotes","date","length","map","competition","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n// import DatePicker from \"react-date-picker\";\nimport Select from 'react-select'\n\nconst eventTypeOptions = [\n  { value: 'dressage', label: 'Dressage' }, \n  { value:'showJumping', label: 'Show Jumping' },\n  { value: 'showing', label: 'Showing' },\n  { value: 'horseTrials', label: 'Horse Trials' }, \n  { value: 'combinedTraining', label: 'Combined Training' }\n]\n\n\nfunction Competitions() {\n  // Setting our component's initial state\n  const [competitions, setCompetitions] = useState([])\n  const [formObject, setFormObject] = useState({})\n  \n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadCompetitions()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadCompetitions() {\n    API.getCompetitions()\n      .then(res => \n        setCompetitions(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteCompetition(id) {\n    API.deleteCompetition(id)\n      .then(res => loadCompetitions())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveCompetition method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  if (formObject.eventName && formObject.horse) {\n      API.saveCompetition({\n              eventName: formObject.eventName,\n              eventType: formObject.eventType,\n              horse: formObject.horse,\n              disciplines: formObject.disciplines,\n              penalties: formObject.penalties,\n              place: formObject.place,\n              images: formObject.images,\n              resultNotes: formObject.resultNotes,\n              date: formObject.date\n          })\n          .then(res => loadCompetitions())\n          .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Competitions Should I Enter?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"eventName\"\n                placeholder=\"EventName (required)\"\n              />\n\n            Event Type:\n            <Select \n             onClick={handleInputChange}\n             name=\"eventType\"\n             placeholder=\"EventType (required)\"\n              options={eventTypeOptions} />\n   \n             <Input\n                onChange={handleInputChange}\n                name=\"horse\"\n                placeholder=\"Horse (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"resultNotes\"\n                placeholder=\"ResultNotes (Optional)\"\n              />\n                    \n              <FormBtn\n                disabled={!(formObject.eventName && formObject.horse)}\n                onClick={handleFormSubmit}\n              >\n                Submit Competition\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Competitions On My List</h1>\n            </Jumbotron>\n            {competitions.length ? (\n              <List>\n                {competitions.map(competition => (\n                  <ListItem key={competition._id}>\n                    <Link to={\"/competitions/\" + competition._id}>\n                      <strong>\n                        {competition.eventName} with {competition.horse}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n  // end Competitions function\n\n\nexport default Competitions;"]},"metadata":{},"sourceType":"module"}