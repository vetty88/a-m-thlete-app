{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction useAsyncDebounce(defaultFn) {\n  var defaultWait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var debounceRef = React.useRef({});\n  debounceRef.current.defaultFn = defaultFn;\n  debounceRef.current.defaultWait = defaultWait;\n  var debounce = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var fn,\n        wait,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fn = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : debounceRef.current.defaultFn;\n            wait = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : debounceRef.current.defaultWait;\n\n            if (!debounceRef.current.promise) {\n              debounceRef.current.promise = new Promise(function (resolve) {\n                debounceRef.current.resolve = resolve;\n              });\n            }\n\n            if (debounceRef.current.timeout) {\n              clearTimeout(debounceRef.current.timeout);\n            }\n\n            debounceRef.current.timeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      delete debounceRef.current.timeout;\n                      _context.prev = 1;\n                      _context.t0 = debounceRef.current;\n                      _context.next = 5;\n                      return fn();\n\n                    case 5:\n                      _context.t1 = _context.sent;\n\n                      _context.t0.resolve.call(_context.t0, _context.t1);\n\n                      _context.next = 12;\n                      break;\n\n                    case 9:\n                      _context.prev = 9;\n                      _context.t2 = _context[\"catch\"](1);\n                      debounceRef.current.reject(_context.t2);\n\n                    case 12:\n                      _context.prev = 12;\n                      delete debounceRef.current.promise;\n                      return _context.finish(12);\n\n                    case 15:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, null, [[1, 9, 12, 15]]);\n            })), wait);\n            return _context2.abrupt(\"return\", debounceRef.current.promise);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), []);\n  return debounce;\n}\n\nvar formContext = React.createContext();\n\nfunction FormContextProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n  return React.createElement(formContext.Provider, {\n    value: value\n  }, children);\n}\n\nfunction useFormContext(manualFormContext) {\n  var formApi = React.useContext(formContext);\n\n  if (manualFormContext) {\n    return manualFormContext;\n  }\n\n  if (!formApi) {\n    throw new Error(\"You are trying to use the form API outside of a form!\");\n  }\n\n  return formApi;\n}\n\nfunction useFormElement(contextValue) {\n  var FormRef = React.useRef();\n  var FormApiRef = React.useRef();\n  FormApiRef.current = contextValue; // Create a new form element\n\n  if (!FormRef.current) {\n    FormRef.current = function Form(_ref) {\n      var children = _ref.children,\n          noFormElement = _ref.noFormElement,\n          rest = _objectWithoutProperties(_ref, [\"children\", \"noFormElement\"]);\n\n      var _FormApiRef$current = FormApiRef.current,\n          handleSubmit = _FormApiRef$current.handleSubmit,\n          isSubmitting = _FormApiRef$current.meta.isSubmitting,\n          debugForm = _FormApiRef$current.debugForm;\n      return React.createElement(FormContextProvider, {\n        value: FormApiRef.current\n      }, noFormElement ? children : React.createElement(\"form\", _extends({\n        onSubmit: handleSubmit,\n        disabled: isSubmitting\n      }, rest), children, debugForm ? React.createElement(\"div\", {\n        style: {\n          margin: '2rem 0'\n        }\n      }, React.createElement(\"div\", {\n        style: {\n          fontWeight: 'bolder'\n        }\n      }, \"Form State\"), React.createElement(\"pre\", null, React.createElement(\"code\", null, JSON.stringify(_objectSpread({}, FormApiRef.current, {\n        formContext: undefined\n      }), safeStringifyReplace(new Set()), 2)))) : null));\n    };\n  } // Return the form element\n\n\n  return FormRef.current;\n}\n\nfunction safeStringifyReplace(set) {\n  return function (key, value) {\n    if (_typeof(value) === 'object' || Array.isArray(value)) {\n      if (set.has(value)) {\n        return '(circular value)';\n      }\n\n      set.add(value);\n    }\n\n    return typeof value === 'function' ? undefined : value;\n  };\n}\n\nfunction splitFormProps(_ref) {\n  var field = _ref.field,\n      defaultValue = _ref.defaultValue,\n      defaultIsTouched = _ref.defaultIsTouched,\n      defaultError = _ref.defaultError,\n      defaultMeta = _ref.defaultMeta,\n      validatePristine = _ref.validatePristine,\n      validate = _ref.validate,\n      onSubmit = _ref.onSubmit,\n      defaultValues = _ref.defaultValues,\n      filterValue = _ref.filterValue,\n      debugForm = _ref.debugForm,\n      rest = _objectWithoutProperties(_ref, [\"field\", \"defaultValue\", \"defaultIsTouched\", \"defaultError\", \"defaultMeta\", \"validatePristine\", \"validate\", \"onSubmit\", \"defaultValues\", \"filterValue\", \"debugForm\"]);\n\n  return [field, {\n    defaultValue: defaultValue,\n    defaultIsTouched: defaultIsTouched,\n    defaultError: defaultError,\n    defaultMeta: defaultMeta,\n    validatePristine: validatePristine,\n    validate: validate,\n    onSubmit: onSubmit,\n    defaultValues: defaultValues,\n    filterValue: filterValue,\n    debugForm: debugForm\n  }, rest];\n} // Utils\n\n\nfunction getBy(obj, path) {\n  if (!path) {\n    throw new Error('A path string is required to use getBy');\n  }\n\n  var pathArray = makePathArray(path);\n  var pathObj = pathArray;\n  return pathObj.reduce(function (current, pathPart) {\n    if (typeof current !== 'undefined') {\n      return current[pathPart];\n    }\n\n    return undefined;\n  }, obj);\n}\n\nfunction setBy(obj, path, updater) {\n  path = makePathArray(path);\n\n  function doSet(parent) {\n    if (!path.length) {\n      return typeof updater === 'function' ? updater(parent) : updater;\n    }\n\n    var key = path.shift();\n\n    if (typeof key === 'string') {\n      if (_typeof(parent) === 'object') {\n        return _objectSpread({}, parent, _defineProperty({}, key, doSet(parent[key])));\n      }\n\n      return _defineProperty({}, key, doSet());\n    }\n\n    if (typeof key === 'number') {\n      if (Array.isArray(parent)) {\n        var prefix = parent.slice(0, key);\n        return [].concat(_toConsumableArray(prefix.length ? prefix : new Array(key)), [doSet(parent[key])], _toConsumableArray(parent.slice(key + 1)));\n      }\n\n      return [].concat(_toConsumableArray(new Array(key)), [doSet()]);\n    }\n\n    throw new Error('Uh oh!');\n  }\n\n  return doSet(obj);\n}\n\nfunction getFieldID(str) {\n  return makePathArray(str).join('_');\n}\n\nvar reFindNumbers0 = /^(\\d*)$/gm;\nvar reFindNumbers1 = /\\.(\\d*)\\./gm;\nvar reFindNumbers2 = /^(\\d*)\\./gm;\nvar reFindNumbers3 = /\\.(\\d*$)/gm;\nvar reFindMultiplePeriods = /\\.{2,}/gm;\n\nfunction makePathArray(str) {\n  return str.replace('[', '.').replace(']', '').replace(reFindNumbers0, '__int__$1').replace(reFindNumbers1, '.__int__$1.').replace(reFindNumbers2, '__int__$1.').replace(reFindNumbers3, '.__int__$1').replace(reFindMultiplePeriods, '.').split('.').map(function (d) {\n    if (d.indexOf('__int__') === 0) {\n      return parseInt(d.substring('__int__'.length), 10);\n    }\n\n    return d;\n  });\n}\n\nfunction loopObject(obj, fn, callback) {\n  Object.keys(obj).forEach(function (key) {\n    callback(fn(obj[key], key), key);\n  });\n}\n\nfunction someObject(obj, fn) {\n  var found = false;\n  loopObject(obj, fn, function (result, key) {\n    if (found) {\n      return;\n    }\n\n    if (result) {\n      found = true;\n    }\n  });\n  return found;\n}\n\nvar defaultDefaultValue = {};\n\nfunction makeState(decor) {\n  return _objectSpread({\n    meta: {\n      isSubmitting: false,\n      isTouched: false,\n      isSubmitted: false,\n      submissionAttempts: 0\n    },\n    __fieldMeta: {}\n  }, decor);\n}\n\nfunction useForm() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      onSubmit = _ref.onSubmit,\n      _ref$defaultValues = _ref.defaultValues,\n      defaultValues = _ref$defaultValues === void 0 ? defaultDefaultValue : _ref$defaultValues,\n      validate = _ref.validate,\n      validatePristine = _ref.validatePristine,\n      debugForm = _ref.debugForm;\n\n  var _React$useState = React.useState(function () {\n    return makeState({\n      values: defaultValues\n    });\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      _React$useState2$ = _React$useState2[0],\n      values = _React$useState2$.values,\n      meta = _React$useState2$.meta,\n      __fieldMeta = _React$useState2$.__fieldMeta,\n      setState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      shouldResubmit = _React$useState4[0],\n      setShouldResubmit = _React$useState4[1];\n\n  var apiRef = React.useRef();\n  var metaRef = React.useRef({});\n\n  var __fieldMetaRefsRef = React.useRef({}); // Keep validate up to date with the latest version\n\n\n  metaRef.current.validate = validate;\n  var fieldsAreValidating = someObject(__fieldMeta, function (field) {\n    return field && field.isValidating;\n  });\n  var fieldsAreValid = !someObject(__fieldMeta, function (field) {\n    return field && field.error;\n  }); // Can we submit this form?\n\n  var isValid = !fieldsAreValidating && fieldsAreValid && !meta.error;\n  var canSubmit = isValid && !meta.isValidating && !meta.isSubmitting; // Decorate form meta\n\n  meta = React.useMemo(function () {\n    return _objectSpread({}, meta, {\n      fieldsAreValidating: fieldsAreValidating,\n      fieldsAreValid: fieldsAreValid,\n      isValid: isValid,\n      canSubmit: canSubmit\n    });\n  }, [meta, fieldsAreValidating, fieldsAreValid, isValid, canSubmit]); // We want the apiRef to change every time state updates\n\n  var api = React.useMemo(function () {\n    return {\n      values: values,\n      meta: meta,\n      __fieldMeta: __fieldMeta,\n      debugForm: debugForm\n    };\n  }, [debugForm, __fieldMeta, meta, values]); // Keep the apiRef up to date with the latest version of the api\n\n  apiRef.current = api;\n  var reset = React.useCallback(function () {\n    setState(function () {\n      return makeState({\n        values: defaultValues\n      });\n    });\n  }, [defaultValues, setState]); // On submit\n\n  var handleSubmit = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var e,\n        needsResubmit,\n        fieldValidationPromises,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            e = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n            if (e.persist) e.persist();\n            if (e.preventDefault) e.preventDefault(); // This lets sub-forms with form elements (despite them being invalid HTML)\n            // handle submissions without triggering parent forms\n\n            if (!e.__handled) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 5:\n            e.__handled = true; // Don't let invalid forms submit\n\n            if (apiRef.current.meta.isValid) {\n              _context3.next = 9;\n              break;\n            }\n\n            // If the form can't submit, let's trigger all of the fields\n            // to be touched. Thus, their validations will run\n            apiRef.current.setMeta({\n              isSubmitting: false\n            });\n            return _context3.abrupt(\"return\");\n\n          case 9:\n            apiRef.current.setMeta({\n              isSubmitting: true\n            });\n            needsResubmit = false;\n            fieldValidationPromises = [];\n            Object.keys(apiRef.current.__fieldMetaRefs).forEach(function (key) {\n              var fieldMeta = apiRef.current.__fieldMetaRefs[key].current;\n              Object.keys(fieldMeta.instanceRefs).forEach(function (key) {\n                var fieldInstance = fieldMeta.instanceRefs[key].current; // If any fields are not touched\n\n                if (!fieldInstance.meta.isTouched) {\n                  // Mark them as touched\n                  fieldInstance.setMeta({\n                    isTouched: true\n                  }); // Likewise, if they need validation\n\n                  if (fieldInstance.__validate) {\n                    // Run their validation and keep track of the\n                    // promise\n                    fieldValidationPromises.push(fieldInstance.runValidation());\n                  }\n                }\n              });\n            }); // If any validation needed to be run\n\n            if (fieldValidationPromises.length) {\n              // Mark for resubmission\n              needsResubmit = true;\n            }\n\n            if (!apiRef.current.meta.isTouched) {\n              // Mark for resubmission\n              needsResubmit = true; // Mark the form as touched\n\n              apiRef.current.setMeta(function (old) {\n                return _objectSpread({}, old, {\n                  isTouched: true\n                });\n              });\n            }\n\n            if (!needsResubmit) {\n              _context3.next = 23;\n              break;\n            }\n\n            _context3.next = 18;\n            return Promise.all(fieldValidationPromises);\n\n          case 18:\n            _context3.next = 20;\n            return apiRef.current.runValidation();\n\n          case 20:\n            // Then rerun the submission attempt\n            e.__handled = false;\n            setShouldResubmit(e || true); // Do not continue\n\n            return _context3.abrupt(\"return\");\n\n          case 23:\n            apiRef.current.setMeta(function (old) {\n              return _objectSpread({}, old, {\n                // Submittion attempts mark the form as not submitted\n                isSubmitted: false,\n                // Count submission attempts\n                submissionAttempts: old.submissionAttempts + 1\n              });\n            });\n            _context3.prev = 24;\n            _context3.next = 27;\n            return apiRef.current.onSubmit(apiRef.current.values, apiRef.current);\n\n          case 27:\n            apiRef.current.setMeta({\n              isSubmitted: true\n            });\n            _context3.next = 33;\n            break;\n\n          case 30:\n            _context3.prev = 30;\n            _context3.t0 = _context3[\"catch\"](24);\n            throw _context3.t0;\n\n          case 33:\n            _context3.prev = 33;\n            apiRef.current.setMeta({\n              isSubmitting: false\n            });\n            return _context3.finish(33);\n\n          case 36:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[24, 30, 33, 36]]);\n  })), []); // Create a debounce for this field hook instance (not all instances)\n\n  var debounce = useAsyncDebounce();\n  var setMeta = React.useCallback(function (updater) {\n    setState(function (old) {\n      return _objectSpread({}, old, {\n        meta: typeof updater === 'function' ? updater(old.meta) : _objectSpread({}, old.meta, updater)\n      });\n    });\n  }, [setState]);\n  var runValidation = React.useCallback(function () {\n    if (!metaRef.current.validate) {\n      return;\n    }\n\n    apiRef.current.setMeta({\n      isValidating: true\n    }); // Use the validationCount for all field instances to\n    // track freshness of the validation\n\n    var id = (metaRef.current.validationCount || 0) + 1;\n    metaRef.current.validationCount = id;\n\n    var checkLatest = function checkLatest() {\n      return id === metaRef.current.validationCount;\n    };\n\n    if (!metaRef.current.validationPromise) {\n      metaRef.current.validationPromise = new Promise(function (resolve, reject) {\n        metaRef.current.validationResolve = resolve;\n        metaRef.current.validationReject = reject;\n      });\n    }\n\n    var doValidation = /*#__PURE__*/function () {\n      var _doValidation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var error;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return metaRef.current.validate(apiRef.current.values, apiRef.current);\n\n              case 3:\n                error = _context4.sent;\n\n                if (checkLatest()) {\n                  apiRef.current.setMeta({\n                    isValidating: false\n                  });\n\n                  if (typeof error !== 'undefined') {\n                    if (error) {\n                      if (typeof error === 'string') {\n                        apiRef.current.setMeta({\n                          error: error\n                        });\n                      }\n                    } else {\n                      apiRef.current.setMeta({\n                        error: null\n                      });\n                    }\n                  }\n\n                  metaRef.current.validationResolve();\n                }\n\n                _context4.next = 10;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (checkLatest()) {\n                  metaRef.current.validationReject(_context4.t0);\n                }\n\n              case 10:\n                _context4.prev = 10;\n                delete metaRef.current.validationPromise;\n                return _context4.finish(10);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 7, 10, 13]]);\n      }));\n\n      function doValidation() {\n        return _doValidation.apply(this, arguments);\n      }\n\n      return doValidation;\n    }();\n\n    doValidation();\n    return metaRef.current.validationPromise;\n  }, []);\n  var getFieldValue = React.useCallback(function (field) {\n    return getBy(apiRef.current.values, field);\n  }, []);\n  var getFieldMeta = React.useCallback(function (field) {\n    var fieldID = getFieldID(field);\n    return apiRef.current.__fieldMeta[fieldID];\n  }, []);\n\n  var __getFieldMetaRef = React.useCallback(function (field) {\n    var fieldID = getFieldID(field);\n\n    if (!apiRef.current.__fieldMetaRefs[fieldID]) {\n      apiRef.current.__fieldMetaRefs[fieldID] = {\n        current: {\n          instanceRefs: {}\n        }\n      };\n    }\n\n    return apiRef.current.__fieldMetaRefs[fieldID];\n  }, []);\n\n  var setFieldMeta = React.useCallback(function (field, updater) {\n    var fieldID = getFieldID(field);\n    setState(function (old) {\n      var newFieldMeta = typeof updater === 'function' ? updater(old.__fieldMeta[fieldID]) : _objectSpread({}, old.__fieldMeta[fieldID], updater);\n      return _objectSpread({}, old, {\n        // Any errors in fields should visually stop\n        // form.isSubmitting\n        meta: newFieldMeta && newFieldMeta.error ? _objectSpread({}, old.meta, {\n          isSubmitting: false\n        }) : old.meta,\n        __fieldMeta: _objectSpread({}, old.__fieldMeta, _defineProperty({}, fieldID, newFieldMeta))\n      });\n    });\n  }, [setState]);\n  var setFieldValue = React.useCallback(function (field, updater) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$isTouched = _ref2.isTouched,\n        isTouched = _ref2$isTouched === void 0 ? true : _ref2$isTouched;\n\n    var fieldInstances = apiRef.current.__getFieldInstances(field);\n\n    setState(function (old) {\n      var newValue = typeof updater === 'function' ? updater(getBy(old.values, field)) : updater;\n      fieldInstances.forEach(function (instance) {\n        if (instance.current.__filterValue) {\n          newValue = instance.current.__filterValue(newValue, apiRef.current);\n        }\n      });\n      return _objectSpread({}, old, {\n        values: setBy(old.values, field, newValue)\n      });\n    });\n\n    if (isTouched) {\n      apiRef.current.setFieldMeta(field, {\n        isTouched: true\n      });\n      apiRef.current.setMeta({\n        isTouched: true\n      });\n    }\n  }, [setState]);\n\n  var __getFieldInstances = React.useCallback(function (field) {\n    var __metaRef = apiRef.current.__getFieldMetaRef(field);\n\n    return Object.keys(__metaRef.current.instanceRefs).map(function (key) {\n      return __metaRef.current.instanceRefs[key];\n    });\n  }, []);\n\n  var pushFieldValue = React.useCallback(function (field, value, options) {\n    apiRef.current.setFieldValue(field, function (old) {\n      return [].concat(_toConsumableArray(Array.isArray(old) ? old : []), [value]);\n    }, options);\n  }, []);\n  var insertFieldValue = React.useCallback(function (field, index, value, options) {\n    apiRef.current.setFieldValue(field, function (old) {\n      if (Array.isArray(old)) {\n        return old.map(function (d, i) {\n          return i === index ? value : d;\n        });\n      } else {\n        throw Error(\"Cannot insert a field value into a non-array field. Check that this field's existing value is an array: \".concat(field, \".\"));\n      }\n    }, options);\n  }, []);\n  var removeFieldValue = React.useCallback(function (field, index, options) {\n    apiRef.current.setFieldValue(field, function (old) {\n      if (Array.isArray(old)) {\n        return old.filter(function (d, i) {\n          return i !== index;\n        });\n      } else {\n        throw Error(\"Cannot remove a field value from a non-array field. Check that this field's existing value is an array: \".concat(field, \".\"));\n      }\n    }, options);\n  }, []);\n  var swapFieldValues = React.useCallback(function (path, index1, index2) {\n    setState(function (old) {\n      var old1 = getBy(old.values, [path, index1]);\n      var old2 = getBy(old.values, [path, index2]);\n      var values = setBy(old.values, [path, index1], old2);\n      values = setBy(values, [path, index2], old1);\n      return _objectSpread({}, old, {\n        values: values\n      });\n    });\n  }, [setState]);\n  var setValues = React.useCallback(function (values) {\n    setState(function (old) {\n      return _objectSpread({}, old, {\n        values: values\n      });\n    });\n  }, [setState]); // Create the Form element if necessary\n\n  var Form = useFormElement(api);\n  Object.assign(api, {\n    __fieldMetaRefs: __fieldMetaRefsRef.current,\n    onSubmit: onSubmit,\n    reset: reset,\n    handleSubmit: handleSubmit,\n    debounce: debounce,\n    setMeta: setMeta,\n    runValidation: runValidation,\n    getFieldValue: getFieldValue,\n    getFieldMeta: getFieldMeta,\n    __getFieldMetaRef: __getFieldMetaRef,\n    setFieldMeta: setFieldMeta,\n    setFieldValue: setFieldValue,\n    __getFieldInstances: __getFieldInstances,\n    pushFieldValue: pushFieldValue,\n    insertFieldValue: insertFieldValue,\n    removeFieldValue: removeFieldValue,\n    swapFieldValues: swapFieldValues,\n    setValues: setValues,\n    Form: Form,\n    formContext: api\n  }); // If shouldResubmit is true, do yo thang\n\n  React.useEffect(function () {\n    if (shouldResubmit) {\n      handleSubmit(shouldResubmit);\n      setShouldResubmit(false);\n    }\n  }, [handleSubmit, shouldResubmit]); // When the form gets dirty and when the value changes\n  // validate\n\n  React.useEffect(function () {\n    if (!validatePristine && !meta.isTouched) {\n      return;\n    }\n\n    apiRef.current.runValidation(values);\n  }, [meta.isTouched, validatePristine, values]); // When defaultValues update, set them\n\n  React.useEffect(function () {\n    if (defaultValues !== apiRef.current.values) {\n      setState(function (old) {\n        return _objectSpread({}, old, {\n          values: defaultValues\n        });\n      });\n    }\n  }, [defaultValues, setState]); // Return the root form and the Form component to the hook user\n\n  return apiRef.current;\n}\n\nfunction useFieldScope(contextValue) {\n  var FieldScopeRef = React.useRef();\n  var FieldScopeApiRef = React.useRef();\n  FieldScopeApiRef.current = contextValue; // Create a new form element\n\n  if (!FieldScopeRef.current) {\n    FieldScopeRef.current = function Field(_ref) {\n      var children = _ref.children;\n      return React.createElement(FormContextProvider, {\n        value: FieldScopeApiRef.current\n      }, children);\n    };\n  }\n\n  return FieldScopeRef.current;\n}\n\nvar uid = 0;\nvar methodMap = ['setFieldValue', 'setFieldMeta', 'pushFieldValue', 'insertFieldValue', 'removeFieldValue', 'swapFieldValues'];\nvar defaultDefaultMeta = {\n  error: null,\n  isTouched: false,\n  isValidating: false\n};\n\nfunction useField(fieldName) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      defaultValue = _ref.defaultValue,\n      _ref$defaultIsTouched = _ref.defaultIsTouched,\n      defaultIsTouched = _ref$defaultIsTouched === void 0 ? false : _ref$defaultIsTouched,\n      _ref$defaultError = _ref.defaultError,\n      defaultError = _ref$defaultError === void 0 ? null : _ref$defaultError,\n      _ref$defaultMeta = _ref.defaultMeta,\n      defaultMeta = _ref$defaultMeta === void 0 ? defaultDefaultMeta : _ref$defaultMeta,\n      validatePristine = _ref.validatePristine,\n      validate = _ref.validate,\n      filterValue = _ref.filterValue,\n      manualFormContext = _ref.formContext;\n\n  if (!fieldName) {\n    throw new Error(\"useField: A field is required to use this hook. eg, useField('myField', options)\");\n  }\n\n  var formApiRef = React.useRef();\n  var fieldApiRef = React.useRef({});\n  var formApi = useFormContext(manualFormContext);\n  var instanceIDRef = React.useRef(uid++);\n  var instanceID = instanceIDRef.current; // Support field prefixing from FieldScope\n\n  var fieldPrefix = '';\n\n  if (formApi.fieldName) {\n    fieldPrefix = \"\".concat(formApi.fieldName, \".\");\n    formApi = formApi.form;\n  }\n\n  fieldName = fieldPrefix + fieldName; // Create a debounce for this field hook instance (not all instances)\n\n  var debounce = useAsyncDebounce(); // An escape hatch for accessing latest formAPI\n\n  formApiRef.current = formApi; // Get the field value, meta, and metaRef\n\n  var preValue = formApi.getFieldValue(fieldName);\n  var preMeta = formApi.getFieldMeta(fieldName);\n\n  var __metaRef = formApi.__getFieldMetaRef(fieldName); // Handle default value\n\n\n  var value = React.useMemo(function () {\n    return typeof preValue === 'undefined' && typeof defaultValue !== 'undefined' ? defaultValue : preValue;\n  }, [defaultValue, preValue]); // Handle default meta\n\n  var meta = React.useMemo(function () {\n    return typeof preMeta === 'undefined' ? _objectSpread({}, defaultMeta, {\n      error: defaultError,\n      isTouched: defaultIsTouched\n    }) : preMeta;\n  }, [defaultError, defaultMeta, defaultIsTouched, preMeta]); // Create the fieldApi\n\n  var fieldApi = React.useMemo(function () {\n    return {\n      value: value,\n      meta: meta,\n      form: formApi,\n      fieldName: fieldName\n    };\n  }, [fieldName, formApi, meta, value]); // Keep the fieldApiRef up to date\n\n  fieldApiRef.current = fieldApi;\n  fieldApiRef.current.__filterValue = filterValue;\n  fieldApiRef.current.__validate = validate; // Let's scope some field-level methods for convenience\n\n  var _methodMap$map = methodMap.map(function (d) {\n    // Since this array is stable and always the same, we can disable\n    // the react-hooks linter here:\n    // eslint-disable-next-line\n    return React.useCallback(function () {\n      var _formApiRef$current;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_formApiRef$current = formApiRef.current)[d].apply(_formApiRef$current, [fieldName].concat(args));\n    }, // eslint-disable-next-line\n    [fieldName]);\n  }),\n      _methodMap$map2 = _slicedToArray(_methodMap$map, 6),\n      setValue = _methodMap$map2[0],\n      setMeta = _methodMap$map2[1],\n      pushValue = _methodMap$map2[2],\n      insertValue = _methodMap$map2[3],\n      removeValue = _methodMap$map2[4],\n      swapValues = _methodMap$map2[5]; // Let's scope some field-level methods for convenience\n\n\n  var _methodMap$map3 = methodMap.map(function (d) {\n    // Since this array is stable and always the same, we can disable\n    // the react-hooks linter here:\n    // eslint-disable-next-line\n    return React.useCallback(function (subField) {\n      var _formApiRef$current2;\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return (_formApiRef$current2 = formApiRef.current)[d].apply(_formApiRef$current2, [\"\".concat(fieldName, \".\").concat(subField)].concat(args));\n    }, // eslint-disable-next-line\n    [fieldName]);\n  }),\n      _methodMap$map4 = _slicedToArray(_methodMap$map3, 6),\n      setFieldValue = _methodMap$map4[0],\n      setFieldMeta = _methodMap$map4[1],\n      pushFieldValue = _methodMap$map4[2],\n      insertFieldValue = _methodMap$map4[3],\n      removeFieldValue = _methodMap$map4[4],\n      swapFieldValues = _methodMap$map4[5];\n\n  var runValidation = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var id, checkLatest, doValidate;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (fieldApiRef.current.__validate) {\n              _context6.next = 2;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 2:\n            setMeta({\n              isValidating: true\n            }); // Use the validationCount for all field instances to\n            // track freshness of the validation\n\n            id = (__metaRef.current.validationCount || 0) + 1;\n            __metaRef.current.validationCount = id;\n\n            checkLatest = function checkLatest() {\n              return id === __metaRef.current.validationCount;\n            };\n\n            if (!__metaRef.current.validationPromise) {\n              __metaRef.current.validationPromise = new Promise(function (resolve, reject) {\n                __metaRef.current.validationResolve = resolve;\n                __metaRef.current.validationReject = reject;\n              });\n            }\n\n            doValidate = /*#__PURE__*/function () {\n              var _doValidate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                var error;\n                return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _context5.prev = 0;\n                        _context5.next = 3;\n                        return fieldApiRef.current.__validate(fieldApiRef.current.value, fieldApiRef.current);\n\n                      case 3:\n                        error = _context5.sent;\n\n                        if (checkLatest()) {\n                          setMeta({\n                            isValidating: false\n                          });\n\n                          if (typeof error !== 'undefined') {\n                            if (error) {\n                              if (typeof error === 'string') {\n                                setMeta({\n                                  error: error\n                                });\n                              }\n                            } else {\n                              setMeta({\n                                error: null\n                              });\n                            }\n                          }\n\n                          __metaRef.current.validationResolve();\n                        }\n\n                        _context5.next = 12;\n                        break;\n\n                      case 7:\n                        _context5.prev = 7;\n                        _context5.t0 = _context5[\"catch\"](0);\n\n                        if (!checkLatest()) {\n                          _context5.next = 12;\n                          break;\n                        }\n\n                        __metaRef.current.validationReject(_context5.t0);\n\n                        throw _context5.t0;\n\n                      case 12:\n                        _context5.prev = 12;\n\n                        if (checkLatest()) {\n                          setMeta({\n                            isValidating: false\n                          });\n                          delete __metaRef.current.validationPromise;\n                        }\n\n                        return _context5.finish(12);\n\n                      case 15:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5, null, [[0, 7, 12, 15]]);\n              }));\n\n              function doValidate() {\n                return _doValidate.apply(this, arguments);\n              }\n\n              return doValidate;\n            }();\n\n            doValidate();\n            return _context6.abrupt(\"return\", __metaRef.current.validationPromise);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  })), [__metaRef, setMeta]);\n  var getInputProps = React.useCallback(function () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _onChange = _ref2.onChange,\n        _onBlur = _ref2.onBlur,\n        rest = _objectWithoutProperties(_ref2, [\"onChange\", \"onBlur\"]);\n\n    return _objectSpread({\n      value: value,\n      onChange: function onChange(e) {\n        setValue(e.target.value);\n\n        if (_onChange) {\n          _onChange(e);\n        }\n      },\n      onBlur: function onBlur(e) {\n        setMeta({\n          isTouched: true\n        });\n\n        if (_onBlur) {\n          _onBlur(e);\n        }\n      }\n    }, rest);\n  }, [setMeta, setValue, value]);\n  var FieldScope = useFieldScope(fieldApi); // Fill in the rest of the fieldApi\n\n  Object.assign(fieldApi, {\n    __metaRef: __metaRef,\n    setValue: setValue,\n    setMeta: setMeta,\n    pushValue: pushValue,\n    insertValue: insertValue,\n    removeValue: removeValue,\n    swapValues: swapValues,\n    setFieldValue: setFieldValue,\n    setFieldMeta: setFieldMeta,\n    pushFieldValue: pushFieldValue,\n    insertFieldValue: insertFieldValue,\n    removeFieldValue: removeFieldValue,\n    swapFieldValues: swapFieldValues,\n    debounce: debounce,\n    runValidation: runValidation,\n    getInputProps: getInputProps,\n    FieldScope: FieldScope\n  });\n  React.useEffect(function () {\n    var _formApiRef$current$_ = formApiRef.current.__getFieldMetaRef(fieldName),\n        meta = _formApiRef$current$_.current;\n\n    meta.instanceRefs = meta.instanceRefs || {};\n    meta.instanceRefs[instanceID] = fieldApiRef;\n    var fieldID = getFieldID(fieldName);\n    return function () {\n      delete meta.instanceRefs[instanceID];\n\n      if (!Object.keys(meta.instanceRefs).length) {\n        fieldApiRef.current.setMeta(function () {\n          return undefined;\n        });\n        delete formApiRef.current.__fieldMetaRefs[fieldID];\n      }\n    };\n  }, [fieldName, instanceID]); // The default value effect handler\n\n  React.useEffect(function () {\n    if (typeof preValue === 'undefined' && typeof value !== 'undefined') {\n      setValue(value, {\n        isTouched: false\n      });\n    }\n  }, [preValue, setValue, value]); // The default meta effect handler\n\n  React.useEffect(function () {\n    if (typeof preMeta === 'undefined' && typeof meta !== 'undefined') {\n      setMeta(meta);\n    }\n  }, [fieldName, meta, preMeta, setMeta, setValue, value]); // When the form gets dirty and when the value changes, run the validation\n\n  React.useEffect(function () {\n    if (!validatePristine && !meta.isTouched) {\n      return;\n    }\n\n    try {\n      runValidation(value);\n    } catch (err) {\n      console.error('An error occurred during validation', err);\n    }\n  }, [meta.isTouched, runValidation, validatePristine, value]);\n  return fieldApiRef.current;\n}\n\nexport { splitFormProps, useField, useForm, useFormContext };","map":{"version":3,"sources":["../src/hooks/useAsyncDebounce.js","../src/hooks/useFormContext.js","../src/hooks/useFormElement.js","../src/utils.js","../src/hooks/useForm.js","../src/hooks/useFieldScope.js","../src/hooks/useField.js"],"names":["defaultWait","debounceRef","React","debounce","fn","defaultFn","wait","clearTimeout","setTimeout","formContext","value","children","formApi","FormRef","FormApiRef","noFormElement","rest","handleSubmit","isSubmitting","debugForm","current","margin","fontWeight","undefined","safeStringifyReplace","Array","set","field","defaultValue","defaultIsTouched","defaultError","defaultMeta","validatePristine","validate","onSubmit","defaultValues","filterValue","pathArray","makePathArray","pathObj","path","updater","key","doSet","parent","prefix","reFindNumbers0","reFindNumbers1","reFindNumbers2","reFindNumbers3","reFindMultiplePeriods","d","parseInt","Object","callback","obj","found","loopObject","defaultDefaultValue","meta","isTouched","isSubmitted","submissionAttempts","__fieldMeta","values","setState","makeState","shouldResubmit","setShouldResubmit","apiRef","metaRef","__fieldMetaRefsRef","fieldsAreValidating","someObject","fieldsAreValid","isValid","canSubmit","api","reset","e","needsResubmit","fieldValidationPromises","fieldMeta","fieldInstance","Promise","old","useAsyncDebounce","setMeta","runValidation","isValidating","id","checkLatest","doValidation","error","getFieldValue","getBy","getFieldMeta","fieldID","getFieldID","__getFieldMetaRef","instanceRefs","setFieldMeta","newFieldMeta","setFieldValue","fieldInstances","newValue","instance","setBy","__getFieldInstances","__metaRef","pushFieldValue","insertFieldValue","i","Error","removeFieldValue","swapFieldValues","old1","old2","setValues","Form","useFormElement","__fieldMetaRefs","FieldScopeRef","FieldScopeApiRef","uid","methodMap","defaultDefaultMeta","manualFormContext","formApiRef","fieldApiRef","useFormContext","instanceIDRef","instanceID","fieldPrefix","fieldName","preValue","preMeta","fieldApi","form","setValue","pushValue","insertValue","removeValue","swapValues","args","doValidate","getInputProps","onChange","onBlur","FieldScope","useFieldScope","console"],"mappings":"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","sourcesContent":["import React from 'react'\n\nexport default function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n  debounceRef.current.defaultFn = defaultFn\n  debounceRef.current.defaultWait = defaultWait\n\n  const debounce = React.useCallback(\n    async (\n      fn = debounceRef.current.defaultFn,\n      wait = debounceRef.current.defaultWait\n    ) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise(resolve => {\n          debounceRef.current.resolve = resolve\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await fn())\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, wait)\n\n      return debounceRef.current.promise\n    },\n    []\n  )\n\n  return debounce\n}\n","import React from 'react'\n//\n\nconst formContext = React.createContext()\n\nexport function FormContextProvider({ value, children }) {\n  return <formContext.Provider value={value}>{children}</formContext.Provider>\n}\n\nexport default function useFormContext(manualFormContext) {\n  let formApi = React.useContext(formContext)\n\n  if (manualFormContext) {\n    return manualFormContext\n  }\n\n  if (!formApi) {\n    throw new Error(`You are trying to use the form API outside of a form!`)\n  }\n\n  return formApi\n}\n","import React from 'react'\n//\n\nimport { FormContextProvider } from './useFormContext'\n\nexport default function useFormElement(contextValue) {\n  const FormRef = React.useRef()\n  const FormApiRef = React.useRef()\n\n  FormApiRef.current = contextValue\n\n  // Create a new form element\n  if (!FormRef.current) {\n    FormRef.current = function Form({ children, noFormElement, ...rest }) {\n      const {\n        handleSubmit,\n        meta: { isSubmitting },\n        debugForm,\n      } = FormApiRef.current\n\n      return (\n        <FormContextProvider value={FormApiRef.current}>\n          {noFormElement ? (\n            children\n          ) : (\n            <form onSubmit={handleSubmit} disabled={isSubmitting} {...rest}>\n              {children}\n              {debugForm ? (\n                <div\n                  style={{\n                    margin: '2rem 0',\n                  }}\n                >\n                  <div\n                    style={{\n                      fontWeight: 'bolder',\n                    }}\n                  >\n                    Form State\n                  </div>\n                  <pre>\n                    <code>\n                      {JSON.stringify(\n                        { ...FormApiRef.current, formContext: undefined },\n                        safeStringifyReplace(new Set()),\n                        2\n                      )}\n                    </code>\n                  </pre>\n                </div>\n              ) : null}\n            </form>\n          )}\n        </FormContextProvider>\n      )\n    }\n  }\n\n  // Return the form element\n  return FormRef.current\n}\n\nfunction safeStringifyReplace(set) {\n  return (key, value) => {\n    if (typeof value === 'object' || Array.isArray(value)) {\n      if (set.has(value)) {\n        return '(circular value)'\n      }\n      set.add(value)\n    }\n    return typeof value === 'function' ? undefined : value\n  }\n}\n","export function splitFormProps({\n  field,\n  defaultValue,\n  defaultIsTouched,\n  defaultError,\n  defaultMeta,\n  validatePristine,\n  validate,\n  onSubmit,\n  defaultValues,\n  filterValue,\n  debugForm,\n  ...rest\n}) {\n  return [\n    field,\n    {\n      defaultValue,\n      defaultIsTouched,\n      defaultError,\n      defaultMeta,\n      validatePristine,\n      validate,\n      onSubmit,\n      defaultValues,\n      filterValue,\n      debugForm,\n    },\n    rest,\n  ]\n}\n\n// Utils\n\nexport function getBy(obj, path) {\n  if (!path) {\n    throw new Error('A path string is required to use getBy')\n  }\n  const pathArray = makePathArray(path)\n  const pathObj = pathArray\n  return pathObj.reduce((current, pathPart) => {\n    if (typeof current !== 'undefined') {\n      return current[pathPart]\n    }\n    return undefined\n  }, obj)\n}\n\nexport function setBy(obj, path, updater) {\n  path = makePathArray(path)\n\n  function doSet(parent) {\n    if (!path.length) {\n      return typeof updater === 'function' ? updater(parent) : updater\n    }\n\n    const key = path.shift()\n\n    if (typeof key === 'string') {\n      if (typeof parent === 'object') {\n        return {\n          ...parent,\n          [key]: doSet(parent[key]),\n        }\n      }\n      return {\n        [key]: doSet(),\n      }\n    }\n\n    if (typeof key === 'number') {\n      if (Array.isArray(parent)) {\n        const prefix = parent.slice(0, key)\n        return [\n          ...(prefix.length ? prefix : new Array(key)),\n          doSet(parent[key]),\n          ...parent.slice(key + 1),\n        ]\n      }\n      return [...new Array(key), doSet()]\n    }\n\n    throw new Error('Uh oh!')\n  }\n\n  return doSet(obj)\n}\n\nexport function getFieldID(str) {\n  return makePathArray(str).join('_')\n}\n\nconst reFindNumbers0 = /^(\\d*)$/gm\nconst reFindNumbers1 = /\\.(\\d*)\\./gm\nconst reFindNumbers2 = /^(\\d*)\\./gm\nconst reFindNumbers3 = /\\.(\\d*$)/gm\nconst reFindMultiplePeriods = /\\.{2,}/gm\n\nfunction makePathArray(str) {\n  return str\n    .replace('[', '.')\n    .replace(']', '')\n    .replace(reFindNumbers0, '__int__$1')\n    .replace(reFindNumbers1, '.__int__$1.')\n    .replace(reFindNumbers2, '__int__$1.')\n    .replace(reFindNumbers3, '.__int__$1')\n    .replace(reFindMultiplePeriods, '.')\n    .split('.')\n    .map(d => {\n      if (d.indexOf('__int__') === 0) {\n        return parseInt(d.substring('__int__'.length), 10)\n      }\n      return d\n    })\n}\n\nfunction loopObject(obj, fn, callback) {\n  Object.keys(obj).forEach(key => {\n    callback(fn(obj[key], key), key)\n  })\n}\n\nexport function someObject(obj, fn) {\n  let found = false\n\n  loopObject(obj, fn, (result, key) => {\n    if (found) {\n      return\n    }\n    if (result) {\n      found = true\n    }\n  })\n\n  return found\n}\n","import React from 'react'\n//\nimport useAsyncDebounce from './useAsyncDebounce'\nimport useFormElement from './useFormElement'\nimport { someObject, getBy, setBy, getFieldID } from '../utils'\n\nconst defaultDefaultValue = {}\n\nfunction makeState(decor) {\n  return {\n    meta: {\n      isSubmitting: false,\n      isTouched: false,\n      isSubmitted: false,\n      submissionAttempts: 0,\n    },\n    __fieldMeta: {},\n    ...decor,\n  }\n}\n\nexport default function useForm({\n  onSubmit,\n  defaultValues = defaultDefaultValue,\n  validate,\n  validatePristine,\n  debugForm,\n} = {}) {\n  let [{ values, meta, __fieldMeta }, setState] = React.useState(() =>\n    makeState({\n      values: defaultValues,\n    })\n  )\n\n  const [shouldResubmit, setShouldResubmit] = React.useState(false)\n  const apiRef = React.useRef()\n  const metaRef = React.useRef({})\n  const __fieldMetaRefsRef = React.useRef({})\n\n  // Keep validate up to date with the latest version\n  metaRef.current.validate = validate\n\n  const fieldsAreValidating = someObject(\n    __fieldMeta,\n    field => field && field.isValidating\n  )\n  const fieldsAreValid = !someObject(__fieldMeta, field => field && field.error)\n\n  // Can we submit this form?\n  const isValid = !fieldsAreValidating && fieldsAreValid && !meta.error\n\n  const canSubmit = isValid && !meta.isValidating && !meta.isSubmitting\n\n  // Decorate form meta\n  meta = React.useMemo(\n    () => ({\n      ...meta,\n      fieldsAreValidating,\n      fieldsAreValid,\n      isValid,\n      canSubmit,\n    }),\n    [meta, fieldsAreValidating, fieldsAreValid, isValid, canSubmit]\n  )\n\n  // We want the apiRef to change every time state updates\n  const api = React.useMemo(\n    () => ({\n      values,\n      meta,\n      __fieldMeta,\n      debugForm,\n    }),\n    [debugForm, __fieldMeta, meta, values]\n  )\n  // Keep the apiRef up to date with the latest version of the api\n  apiRef.current = api\n\n  const reset = React.useCallback(() => {\n    setState(() =>\n      makeState({\n        values: defaultValues,\n      })\n    )\n  }, [defaultValues, setState])\n\n  // On submit\n  const handleSubmit = React.useCallback(async (e = {}) => {\n    if (e.persist) e.persist()\n    if (e.preventDefault) e.preventDefault()\n\n    // This lets sub-forms with form elements (despite them being invalid HTML)\n    // handle submissions without triggering parent forms\n    if (e.__handled) {\n      return\n    }\n    e.__handled = true\n\n    // Don't let invalid forms submit\n    if (!apiRef.current.meta.isValid) {\n      // If the form can't submit, let's trigger all of the fields\n      // to be touched. Thus, their validations will run\n      apiRef.current.setMeta({ isSubmitting: false })\n      return\n    }\n\n    apiRef.current.setMeta({ isSubmitting: true })\n\n    let needsResubmit = false\n\n    const fieldValidationPromises = []\n\n    Object.keys(apiRef.current.__fieldMetaRefs).forEach(key => {\n      const { current: fieldMeta } = apiRef.current.__fieldMetaRefs[key]\n      Object.keys(fieldMeta.instanceRefs).forEach(key => {\n        const { current: fieldInstance } = fieldMeta.instanceRefs[key]\n        // If any fields are not touched\n        if (!fieldInstance.meta.isTouched) {\n          // Mark them as touched\n          fieldInstance.setMeta({ isTouched: true })\n          // Likewise, if they need validation\n          if (fieldInstance.__validate) {\n            // Run their validation and keep track of the\n            // promise\n            fieldValidationPromises.push(fieldInstance.runValidation())\n          }\n        }\n      })\n    })\n\n    // If any validation needed to be run\n    if (fieldValidationPromises.length) {\n      // Mark for resubmission\n      needsResubmit = true\n    }\n\n    if (!apiRef.current.meta.isTouched) {\n      // Mark for resubmission\n      needsResubmit = true\n\n      // Mark the form as touched\n      apiRef.current.setMeta(old => ({\n        ...old,\n        isTouched: true,\n      }))\n    }\n\n    if (needsResubmit) {\n      // Wait for any field validations to complete\n      await Promise.all(fieldValidationPromises)\n      // Be sure to run validation for the form\n      // and wait for it to complete\n      await apiRef.current.runValidation()\n      // Then rerun the submission attempt\n      e.__handled = false\n      setShouldResubmit(e || true)\n      // Do not continue\n      return\n    }\n\n    apiRef.current.setMeta(old => ({\n      ...old,\n      // Submittion attempts mark the form as not submitted\n      isSubmitted: false,\n      // Count submission attempts\n      submissionAttempts: old.submissionAttempts + 1,\n    }))\n\n    try {\n      // Run the submit code\n      await apiRef.current.onSubmit(apiRef.current.values, apiRef.current)\n\n      apiRef.current.setMeta({ isSubmitted: true })\n    } catch (err) {\n      throw err\n    } finally {\n      apiRef.current.setMeta({ isSubmitting: false })\n    }\n  }, [])\n\n  // Create a debounce for this field hook instance (not all instances)\n  const debounce = useAsyncDebounce()\n\n  const setMeta = React.useCallback(\n    updater => {\n      setState(old => ({\n        ...old,\n        meta:\n          typeof updater === 'function'\n            ? updater(old.meta)\n            : { ...old.meta, ...updater },\n      }))\n    },\n    [setState]\n  )\n\n  const runValidation = React.useCallback(() => {\n    if (!metaRef.current.validate) {\n      return\n    }\n    apiRef.current.setMeta({ isValidating: true })\n\n    // Use the validationCount for all field instances to\n    // track freshness of the validation\n    const id = (metaRef.current.validationCount || 0) + 1\n    metaRef.current.validationCount = id\n\n    const checkLatest = () => id === metaRef.current.validationCount\n\n    if (!metaRef.current.validationPromise) {\n      metaRef.current.validationPromise = new Promise((resolve, reject) => {\n        metaRef.current.validationResolve = resolve\n        metaRef.current.validationReject = reject\n      })\n    }\n\n    const doValidation = async () => {\n      try {\n        const error = await metaRef.current.validate(\n          apiRef.current.values,\n          apiRef.current\n        )\n\n        if (checkLatest()) {\n          apiRef.current.setMeta({ isValidating: false })\n          if (typeof error !== 'undefined') {\n            if (error) {\n              if (typeof error === 'string') {\n                apiRef.current.setMeta({ error })\n              }\n            } else {\n              apiRef.current.setMeta({ error: null })\n            }\n          }\n          metaRef.current.validationResolve()\n        }\n      } catch (err) {\n        if (checkLatest()) {\n          metaRef.current.validationReject(err)\n        }\n      } finally {\n        delete metaRef.current.validationPromise\n      }\n    }\n\n    doValidation()\n\n    return metaRef.current.validationPromise\n  }, [])\n\n  const getFieldValue = React.useCallback(\n    field => getBy(apiRef.current.values, field),\n    []\n  )\n\n  const getFieldMeta = React.useCallback(field => {\n    const fieldID = getFieldID(field)\n    return apiRef.current.__fieldMeta[fieldID]\n  }, [])\n\n  const __getFieldMetaRef = React.useCallback(field => {\n    const fieldID = getFieldID(field)\n    if (!apiRef.current.__fieldMetaRefs[fieldID]) {\n      apiRef.current.__fieldMetaRefs[fieldID] = {\n        current: {\n          instanceRefs: {},\n        },\n      }\n    }\n    return apiRef.current.__fieldMetaRefs[fieldID]\n  }, [])\n\n  const setFieldMeta = React.useCallback(\n    (field, updater) => {\n      const fieldID = getFieldID(field)\n      setState(old => {\n        const newFieldMeta =\n          typeof updater === 'function'\n            ? updater(old.__fieldMeta[fieldID])\n            : { ...old.__fieldMeta[fieldID], ...updater }\n\n        return {\n          ...old,\n          // Any errors in fields should visually stop\n          // form.isSubmitting\n          meta:\n            newFieldMeta && newFieldMeta.error\n              ? {\n                  ...old.meta,\n                  isSubmitting: false,\n                }\n              : old.meta,\n          __fieldMeta: {\n            ...old.__fieldMeta,\n            [fieldID]: newFieldMeta,\n          },\n        }\n      })\n    },\n    [setState]\n  )\n\n  const setFieldValue = React.useCallback(\n    (field, updater, { isTouched = true } = {}) => {\n      const fieldInstances = apiRef.current.__getFieldInstances(field)\n\n      setState(old => {\n        let newValue =\n          typeof updater === 'function'\n            ? updater(getBy(old.values, field))\n            : updater\n\n        fieldInstances.forEach(instance => {\n          if (instance.current.__filterValue) {\n            newValue = instance.current.__filterValue(newValue, apiRef.current)\n          }\n        })\n\n        return {\n          ...old,\n          values: setBy(old.values, field, newValue),\n        }\n      })\n      if (isTouched) {\n        apiRef.current.setFieldMeta(field, {\n          isTouched: true,\n        })\n        apiRef.current.setMeta({ isTouched: true })\n      }\n    },\n    [setState]\n  )\n\n  const __getFieldInstances = React.useCallback(field => {\n    const __metaRef = apiRef.current.__getFieldMetaRef(field)\n    return Object.keys(__metaRef.current.instanceRefs).map(\n      key => __metaRef.current.instanceRefs[key]\n    )\n  }, [])\n\n  const pushFieldValue = React.useCallback((field, value, options) => {\n    apiRef.current.setFieldValue(\n      field,\n      old => {\n        return [...(Array.isArray(old) ? old : []), value]\n      },\n      options\n    )\n  }, [])\n\n  const insertFieldValue = React.useCallback((field, index, value, options) => {\n    apiRef.current.setFieldValue(\n      field,\n      old => {\n        if (Array.isArray(old)) {\n          return old.map((d, i) => (i === index ? value : d))\n        } else {\n          throw Error(\n            `Cannot insert a field value into a non-array field. Check that this field's existing value is an array: ${field}.`\n          )\n        }\n      },\n      options\n    )\n  }, [])\n\n  const removeFieldValue = React.useCallback((field, index, options) => {\n    apiRef.current.setFieldValue(\n      field,\n      old => {\n        if (Array.isArray(old)) {\n          return old.filter((d, i) => i !== index)\n        } else {\n          throw Error(\n            `Cannot remove a field value from a non-array field. Check that this field's existing value is an array: ${field}.`\n          )\n        }\n      },\n      options\n    )\n  }, [])\n\n  const swapFieldValues = React.useCallback(\n    (path, index1, index2) => {\n      setState(old => {\n        const old1 = getBy(old.values, [path, index1])\n        const old2 = getBy(old.values, [path, index2])\n\n        let values = setBy(old.values, [path, index1], old2)\n        values = setBy(values, [path, index2], old1)\n\n        return {\n          ...old,\n          values,\n        }\n      })\n    },\n    [setState]\n  )\n\n  const setValues = React.useCallback(\n    values => {\n      setState(old => ({\n        ...old,\n        values: values,\n      }))\n    },\n    [setState]\n  )\n\n  // Create the Form element if necessary\n  const Form = useFormElement(api)\n\n  Object.assign(api, {\n    __fieldMetaRefs: __fieldMetaRefsRef.current,\n    onSubmit,\n    reset,\n    handleSubmit,\n    debounce,\n    setMeta,\n    runValidation,\n    getFieldValue,\n    getFieldMeta,\n    __getFieldMetaRef,\n    setFieldMeta,\n    setFieldValue,\n    __getFieldInstances,\n    pushFieldValue,\n    insertFieldValue,\n    removeFieldValue,\n    swapFieldValues,\n    setValues,\n    Form,\n    formContext: api,\n  })\n\n  // If shouldResubmit is true, do yo thang\n  React.useEffect(() => {\n    if (shouldResubmit) {\n      handleSubmit(shouldResubmit)\n      setShouldResubmit(false)\n    }\n  }, [handleSubmit, shouldResubmit])\n\n  // When the form gets dirty and when the value changes\n  // validate\n  React.useEffect(() => {\n    if (!validatePristine && !meta.isTouched) {\n      return\n    }\n\n    apiRef.current.runValidation(values)\n  }, [meta.isTouched, validatePristine, values])\n\n  // When defaultValues update, set them\n  React.useEffect(() => {\n    if (defaultValues !== apiRef.current.values) {\n      setState(old => ({\n        ...old,\n        values: defaultValues,\n      }))\n    }\n  }, [defaultValues, setState])\n\n  // Return the root form and the Form component to the hook user\n  return apiRef.current\n}\n","import React from 'react'\n//\n\nimport { FormContextProvider } from './useFormContext'\n\nexport default function useFieldScope(contextValue) {\n  const FieldScopeRef = React.useRef()\n  const FieldScopeApiRef = React.useRef()\n\n  FieldScopeApiRef.current = contextValue\n\n  // Create a new form element\n  if (!FieldScopeRef.current) {\n    FieldScopeRef.current = function Field({ children }) {\n      return (\n        <FormContextProvider value={FieldScopeApiRef.current}>\n          {children}\n        </FormContextProvider>\n      )\n    }\n  }\n\n  return FieldScopeRef.current\n}\n","import React from 'react'\n//\nimport useAsyncDebounce from './useAsyncDebounce'\nimport useFormContext from './useFormContext'\nimport useFieldScope from './useFieldScope'\nimport { getFieldID } from '../utils'\n\nlet uid = 0\n\nconst methodMap = [\n  'setFieldValue',\n  'setFieldMeta',\n  'pushFieldValue',\n  'insertFieldValue',\n  'removeFieldValue',\n  'swapFieldValues',\n]\n\nconst defaultDefaultMeta = {\n  error: null,\n  isTouched: false,\n  isValidating: false,\n}\n\nexport default function useField(\n  fieldName,\n  {\n    defaultValue,\n    defaultIsTouched = false,\n    defaultError = null,\n    defaultMeta = defaultDefaultMeta,\n    validatePristine,\n    validate,\n    filterValue,\n    formContext: manualFormContext,\n  } = {}\n) {\n  if (!fieldName) {\n    throw new Error(\n      `useField: A field is required to use this hook. eg, useField('myField', options)`\n    )\n  }\n\n  const formApiRef = React.useRef()\n  const fieldApiRef = React.useRef({})\n\n  let formApi = useFormContext(manualFormContext)\n\n  const instanceIDRef = React.useRef(uid++)\n  const instanceID = instanceIDRef.current\n\n  // Support field prefixing from FieldScope\n  let fieldPrefix = ''\n  if (formApi.fieldName) {\n    fieldPrefix = `${formApi.fieldName}.`\n    formApi = formApi.form\n  }\n  fieldName = fieldPrefix + fieldName\n\n  // Create a debounce for this field hook instance (not all instances)\n  const debounce = useAsyncDebounce()\n\n  // An escape hatch for accessing latest formAPI\n  formApiRef.current = formApi\n\n  // Get the field value, meta, and metaRef\n  const preValue = formApi.getFieldValue(fieldName)\n  const preMeta = formApi.getFieldMeta(fieldName)\n  const __metaRef = formApi.__getFieldMetaRef(fieldName)\n\n  // Handle default value\n  const value = React.useMemo(\n    () =>\n      typeof preValue === 'undefined' && typeof defaultValue !== 'undefined'\n        ? defaultValue\n        : preValue,\n    [defaultValue, preValue]\n  )\n\n  // Handle default meta\n  const meta = React.useMemo(\n    () =>\n      typeof preMeta === 'undefined'\n        ? {\n            ...defaultMeta,\n            error: defaultError,\n            isTouched: defaultIsTouched,\n          }\n        : preMeta,\n    [defaultError, defaultMeta, defaultIsTouched, preMeta]\n  )\n\n  // Create the fieldApi\n  const fieldApi = React.useMemo(\n    () => ({\n      value,\n      meta,\n      form: formApi,\n      fieldName,\n    }),\n    [fieldName, formApi, meta, value]\n  )\n\n  // Keep the fieldApiRef up to date\n  fieldApiRef.current = fieldApi\n  fieldApiRef.current.__filterValue = filterValue\n  fieldApiRef.current.__validate = validate\n\n  // Let's scope some field-level methods for convenience\n  const [\n    setValue,\n    setMeta,\n    pushValue,\n    insertValue,\n    removeValue,\n    swapValues,\n  ] = methodMap.map(d => {\n    // Since this array is stable and always the same, we can disable\n    // the react-hooks linter here:\n\n    // eslint-disable-next-line\n    return React.useCallback(\n      (...args) => formApiRef.current[d](fieldName, ...args),\n      // eslint-disable-next-line\n      [fieldName]\n    )\n  })\n\n  // Let's scope some field-level methods for convenience\n  const [\n    setFieldValue,\n    setFieldMeta,\n    pushFieldValue,\n    insertFieldValue,\n    removeFieldValue,\n    swapFieldValues,\n  ] = methodMap.map(d => {\n    // Since this array is stable and always the same, we can disable\n    // the react-hooks linter here:\n\n    // eslint-disable-next-line\n    return React.useCallback(\n      (subField, ...args) =>\n        formApiRef.current[d](`${fieldName}.${subField}`, ...args),\n      // eslint-disable-next-line\n      [fieldName]\n    )\n  })\n\n  const runValidation = React.useCallback(async () => {\n    if (!fieldApiRef.current.__validate) {\n      return\n    }\n    setMeta({ isValidating: true })\n\n    // Use the validationCount for all field instances to\n    // track freshness of the validation\n    const id = (__metaRef.current.validationCount || 0) + 1\n    __metaRef.current.validationCount = id\n\n    const checkLatest = () => id === __metaRef.current.validationCount\n\n    if (!__metaRef.current.validationPromise) {\n      __metaRef.current.validationPromise = new Promise((resolve, reject) => {\n        __metaRef.current.validationResolve = resolve\n        __metaRef.current.validationReject = reject\n      })\n    }\n\n    const doValidate = async () => {\n      try {\n        const error = await fieldApiRef.current.__validate(\n          fieldApiRef.current.value,\n          fieldApiRef.current\n        )\n\n        if (checkLatest()) {\n          setMeta({ isValidating: false })\n          if (typeof error !== 'undefined') {\n            if (error) {\n              if (typeof error === 'string') {\n                setMeta({ error })\n              }\n            } else {\n              setMeta({ error: null })\n            }\n          }\n          __metaRef.current.validationResolve()\n        }\n      } catch (error) {\n        if (checkLatest()) {\n          __metaRef.current.validationReject(error)\n          throw error\n        }\n      } finally {\n        if (checkLatest()) {\n          setMeta({ isValidating: false })\n          delete __metaRef.current.validationPromise\n        }\n      }\n    }\n\n    doValidate()\n\n    return __metaRef.current.validationPromise\n  }, [__metaRef, setMeta])\n\n  const getInputProps = React.useCallback(\n    ({ onChange, onBlur, ...rest } = {}) => {\n      return {\n        value,\n        onChange: e => {\n          setValue(e.target.value)\n          if (onChange) {\n            onChange(e)\n          }\n        },\n        onBlur: e => {\n          setMeta({ isTouched: true })\n          if (onBlur) {\n            onBlur(e)\n          }\n        },\n        ...rest,\n      }\n    },\n    [setMeta, setValue, value]\n  )\n\n  const FieldScope = useFieldScope(fieldApi)\n\n  // Fill in the rest of the fieldApi\n  Object.assign(fieldApi, {\n    __metaRef,\n    setValue,\n    setMeta,\n    pushValue,\n    insertValue,\n    removeValue,\n    swapValues,\n    setFieldValue,\n    setFieldMeta,\n    pushFieldValue,\n    insertFieldValue,\n    removeFieldValue,\n    swapFieldValues,\n    debounce,\n    runValidation,\n    getInputProps,\n    FieldScope,\n  })\n\n  React.useEffect(() => {\n    const { current: meta } = formApiRef.current.__getFieldMetaRef(fieldName)\n\n    meta.instanceRefs = meta.instanceRefs || {}\n    meta.instanceRefs[instanceID] = fieldApiRef\n\n    const fieldID = getFieldID(fieldName)\n\n    return () => {\n      delete meta.instanceRefs[instanceID]\n      if (!Object.keys(meta.instanceRefs).length) {\n        fieldApiRef.current.setMeta(() => undefined)\n        delete formApiRef.current.__fieldMetaRefs[fieldID]\n      }\n    }\n  }, [fieldName, instanceID])\n\n  // The default value effect handler\n  React.useEffect(() => {\n    if (typeof preValue === 'undefined' && typeof value !== 'undefined') {\n      setValue(value, { isTouched: false })\n    }\n  }, [preValue, setValue, value])\n\n  // The default meta effect handler\n  React.useEffect(() => {\n    if (typeof preMeta === 'undefined' && typeof meta !== 'undefined') {\n      setMeta(meta)\n    }\n  }, [fieldName, meta, preMeta, setMeta, setValue, value])\n\n  // When the form gets dirty and when the value changes, run the validation\n  React.useEffect(() => {\n    if (!validatePristine && !meta.isTouched) {\n      return\n    }\n\n    try {\n      runValidation(value)\n    } catch (err) {\n      console.error('An error occurred during validation', err)\n    }\n  }, [meta.isTouched, runValidation, validatePristine, value])\n\n  return fieldApiRef.current\n}\n"]},"metadata":{},"sourceType":"module"}