{"ast":null,"code":"import axios from\"axios\";var express=require('express');var app=express();var mongoose=require('mongoose');require('dotenv').config();// configures dotenv\napp.use(express.json());// MongoDB connection with ATLAS and Mongoose\n// connects to the value within the .env file\nvar uri=process.env.ATLAS_URI;// connects mongoose to the uri and sets some mongoose keys to true to combat mongoose's deprecation warnings\nmongoose.connect(uri,{useNewUrlParser:true,useCreateIndex:true,useUnifiedTopology:true});var connection=mongoose.connection;// make sure that MongoDB connected successfully\nconnection.once('open',function(){console.log(\"MongoDB database connected!!\");});export default{// Get competition from Equestrian Competitions \ngetSearchCompetitions:function getSearchCompetitions(query){return axios.get(connection+query);},// Gets all competitions\ngetCompetitions:function getCompetitions(){return axios.get(\"/api/competitions\");},// Gets the competition with the given id\ngetCompetition:function getCompetition(id){return axios.get(\"/api/competitions/\"+id);},// Deletes the competition with the given id\ndeleteCompetition:function deleteCompetition(id){return axios.delete(\"/api/competitions/\"+id);},// Completes a competition to the database\nsaveCompetition:function saveCompetition(savedCompetitions){return axios.post(\"/api/competitions\",savedCompetitions);}};","map":{"version":3,"sources":["C:/MONASH BOOTCAMP/YW_Amthlete-App/amthlete-app/client/src/utils/API.js"],"names":["axios","express","require","app","mongoose","config","use","json","uri","process","env","ATLAS_URI","connect","useNewUrlParser","useCreateIndex","useUnifiedTopology","connection","once","console","log","getSearchCompetitions","query","get","getCompetitions","getCompetition","id","deleteCompetition","delete","saveCompetition","savedCompetitions","post"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,GAAMC,CAAAA,OAAO,CAAIC,OAAO,CAAC,SAAD,CAAxB,CACA,GAAIC,CAAAA,GAAG,CAAGF,OAAO,EAAjB,CACA,GAAMG,CAAAA,QAAQ,CAAGF,OAAO,CAAC,UAAD,CAAxB,CACAA,OAAO,CAAC,QAAD,CAAP,CAAkBG,MAAlB,GAA4B;AAC5BF,GAAG,CAACG,GAAJ,CAAQL,OAAO,CAACM,IAAR,EAAR,EACA;AACA;AACA,GAAMC,CAAAA,GAAG,CAAGC,OAAO,CAACC,GAAR,CAAYC,SAAxB,CACA;AACAP,QAAQ,CAACQ,OAAT,CAAiBJ,GAAjB,CAAsB,CAAEK,eAAe,CAAE,IAAnB,CAAyBC,cAAc,CAAE,IAAzC,CAA+CC,kBAAkB,CAAE,IAAnE,CAAtB,EACA,GAAMC,CAAAA,UAAU,CAAGZ,QAAQ,CAACY,UAA5B,CACA;AACAA,UAAU,CAACC,IAAX,CAAgB,MAAhB,CAAwB,UAAM,CAC9BC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACC,CAFD,EAKA,cAAe,CACX;AACAC,qBAAqB,CAAE,+BAASC,KAAT,CAAgB,CACnC,MAAOrB,CAAAA,KAAK,CAACsB,GAAN,CAAUN,UAAU,CAAGK,KAAvB,CAAP,CACH,CAJU,CAKb;AACAE,eAAe,CAAE,0BAAW,CAC1B,MAAOvB,CAAAA,KAAK,CAACsB,GAAN,CAAU,mBAAV,CAAP,CACD,CARY,CASb;AACAE,cAAc,CAAE,wBAASC,EAAT,CAAa,CAC3B,MAAOzB,CAAAA,KAAK,CAACsB,GAAN,CAAU,qBAAuBG,EAAjC,CAAP,CACD,CAZY,CAab;AACAC,iBAAiB,CAAE,2BAASD,EAAT,CAAa,CAC9B,MAAOzB,CAAAA,KAAK,CAAC2B,MAAN,CAAa,qBAAuBF,EAApC,CAAP,CACD,CAhBY,CAiBb;AACAG,eAAe,CAAE,yBAASC,iBAAT,CAA4B,CAC3C,MAAO7B,CAAAA,KAAK,CAAC8B,IAAN,CAAW,mBAAX,CAAgCD,iBAAhC,CAAP,CACD,CApBY,CAAf","sourcesContent":["import axios from \"axios\";\nconst express  = require('express');\nlet app = express();\nconst mongoose = require('mongoose');\nrequire('dotenv').config(); // configures dotenv\napp.use(express.json());\n// MongoDB connection with ATLAS and Mongoose\n// connects to the value within the .env file\nconst uri = process.env.ATLAS_URI;\n// connects mongoose to the uri and sets some mongoose keys to true to combat mongoose's deprecation warnings\nmongoose.connect(uri, { useNewUrlParser: true, useCreateIndex: true, useUnifiedTopology: true});\nconst connection = mongoose.connection;\n// make sure that MongoDB connected successfully\nconnection.once('open', () => {\nconsole.log(\"MongoDB database connected!!\");\n});\n\n\nexport default {\n    // Get competition from Equestrian Competitions \n    getSearchCompetitions: function(query) {\n        return axios.get(connection + query);\n    },\n  // Gets all competitions\n  getCompetitions: function() {\n    return axios.get(\"/api/competitions\");\n  },\n  // Gets the competition with the given id\n  getCompetition: function(id) {\n    return axios.get(\"/api/competitions/\" + id);\n  },\n  // Deletes the competition with the given id\n  deleteCompetition: function(id) {\n    return axios.delete(\"/api/competitions/\" + id);\n  },\n  // Completes a competition to the database\n  saveCompetition: function(savedCompetitions) {\n    return axios.post(\"/api/competitions\", savedCompetitions);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}