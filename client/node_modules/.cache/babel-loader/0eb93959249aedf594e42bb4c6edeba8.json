{"ast":null,"code":"import _objectSpread from\"C:\\\\MONASH BOOTCAMP\\\\YW_Amthlete-App\\\\amthlete-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\MONASH BOOTCAMP\\\\YW_Amthlete-App\\\\amthlete-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import DeleteBtn from\"../components/DeleteBtn\";import Jumbotron from\"../components/Jumbotron\";import API from\"../utils/API\";import{Link}from\"react-router-dom\";import{Col,Row,Container}from\"../components/Grid\";import{List,ListItem}from\"../components/List\";import{Input,TextArea,FormBtn}from\"../components/Form\";// import DatePicker from \"react-date-picker\";\nimport Select from'react-select';var eventTypeOptions=[{value:'dressage',label:'Dressage'},{value:'showJumping',label:'Show Jumping'},{value:'showing',label:'Showing'},{value:'horseTrials',label:'Horse Trials'},{value:'combinedTraining',label:'Combined Training'}];function Competitions(){// Setting our component's initial state\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),competitions=_useState2[0],setCompetitions=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),formObject=_useState4[0],setFormObject=_useState4[1];// Load all books and store them with setBooks\nuseEffect(function(){loadCompetitions();},[]);// Loads all books and sets them to books\nfunction loadCompetitions(){API.getCompetitions().then(function(res){return setCompetitions(res.data);}).catch(function(err){return console.log(err);});};// Deletes a book from the database with a given id, then reloads books from the db\nfunction deleteCompetition(id){API.deleteCompetition(id).then(function(res){return loadCompetitions();}).catch(function(err){return console.log(err);});}// Handles updating component state when the user types into the input field\nfunction handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setFormObject(_objectSpread(_objectSpread({},formObject),{},{[name]:value}));};// When the form is submitted, use the API.saveCompetition method to save the book data\n// Then reload books from the database\nfunction handleFormSubmit(event){event.preventDefault();if(formObject.eventName&&formObject.horse){API.saveCompetition({eventName:formObject.eventName,eventType:formObject.eventType,horse:formObject.horse,disciplines:formObject.disciplines,penalties:formObject.penalties,place:formObject.place,images:formObject.images,resultNotes:formObject.resultNotes,date:formObject.date}).then(function(res){return loadCompetitions();}).catch(function(err){return console.log(err);});}};return/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{size:\"md-6\"},/*#__PURE__*/React.createElement(Jumbotron,null,/*#__PURE__*/React.createElement(\"h1\",null,\"What Competitions Should I Enter?\")),/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(Input,{onChange:handleInputChange,name:\"eventName\",placeholder:\"EventName (required)\"}),\"Event Type:\",/*#__PURE__*/React.createElement(Select,{onClick:handleInputChange,name:\"eventType\",placeholder:\"EventType (required)\",options:eventTypeOptions}),/*#__PURE__*/React.createElement(Input,{onChange:handleInputChange,name:\"horse\",placeholder:\"Horse (required)\"}),/*#__PURE__*/React.createElement(TextArea,{onChange:handleInputChange,name:\"resultNotes\",placeholder:\"ResultNotes (Optional)\"}),/*#__PURE__*/React.createElement(FormBtn,{disabled:!(formObject.eventName&&formObject.horse),onClick:handleFormSubmit},\"Submit Competition\"))),/*#__PURE__*/React.createElement(Col,{size:\"md-6 sm-12\"},/*#__PURE__*/React.createElement(Jumbotron,null,/*#__PURE__*/React.createElement(\"h1\",null,\"Competitions On My List\")),competitions.length?/*#__PURE__*/React.createElement(List,null,competitions.map(function(competition){return/*#__PURE__*/React.createElement(ListItem,{key:competition._id},/*#__PURE__*/React.createElement(Link,{to:\"/competitions/\"+competition._id},/*#__PURE__*/React.createElement(\"strong\",null,competition.eventName,\" with \",competition.horse)),/*#__PURE__*/React.createElement(DeleteBtn,{onClick:function onClick(){return deleteCompetition(competition._id);}}));})):/*#__PURE__*/React.createElement(\"h3\",null,\"No Results to Display\"))));}// end Competitions function\nexport default Competitions;","map":{"version":3,"sources":["C:/MONASH BOOTCAMP/YW_Amthlete-App/amthlete-app/client/src/pages/Competitions.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Select","eventTypeOptions","value","label","Competitions","competitions","setCompetitions","formObject","setFormObject","loadCompetitions","getCompetitions","then","res","data","catch","err","console","log","deleteCompetition","id","handleInputChange","event","target","name","handleFormSubmit","preventDefault","eventName","horse","saveCompetition","eventType","disciplines","penalties","place","images","resultNotes","date","length","map","competition","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n// import DatePicker from \"react-date-picker\";\nimport Select from 'react-select'\n\nconst eventTypeOptions = [\n  { value: 'dressage', label: 'Dressage' }, \n  { value:'showJumping', label: 'Show Jumping' },\n  { value: 'showing', label: 'Showing' },\n  { value: 'horseTrials', label: 'Horse Trials' }, \n  { value: 'combinedTraining', label: 'Combined Training' }\n]\n\n\nfunction Competitions() {\n  // Setting our component's initial state\n  const [competitions, setCompetitions] = useState([])\n  const [formObject, setFormObject] = useState({})\n  \n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadCompetitions()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadCompetitions() {\n    API.getCompetitions()\n      .then(res => \n        setCompetitions(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteCompetition(id) {\n    API.deleteCompetition(id)\n      .then(res => loadCompetitions())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveCompetition method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  if (formObject.eventName && formObject.horse) {\n      API.saveCompetition({\n              eventName: formObject.eventName,\n              eventType: formObject.eventType,\n              horse: formObject.horse,\n              disciplines: formObject.disciplines,\n              penalties: formObject.penalties,\n              place: formObject.place,\n              images: formObject.images,\n              resultNotes: formObject.resultNotes,\n              date: formObject.date\n          })\n          .then(res => loadCompetitions())\n          .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Competitions Should I Enter?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"eventName\"\n                placeholder=\"EventName (required)\"\n              />\n\n            Event Type:\n            <Select \n             onClick={handleInputChange}\n             name=\"eventType\"\n             placeholder=\"EventType (required)\"\n              options={eventTypeOptions} />\n   \n             <Input\n                onChange={handleInputChange}\n                name=\"horse\"\n                placeholder=\"Horse (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"resultNotes\"\n                placeholder=\"ResultNotes (Optional)\"\n              />\n                    \n              <FormBtn\n                disabled={!(formObject.eventName && formObject.horse)}\n                onClick={handleFormSubmit}\n              >\n                Submit Competition\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Competitions On My List</h1>\n            </Jumbotron>\n            {competitions.length ? (\n              <List>\n                {competitions.map(competition => (\n                  <ListItem key={competition._id}>\n                    <Link to={\"/competitions/\" + competition._id}>\n                      <strong>\n                        {competition.eventName} with {competition.horse}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n  // end Competitions function\n\n\nexport default Competitions;"]},"metadata":{},"sourceType":"module"}