{"ast":null,"code":"import _objectSpread from \"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\MONASH BOOTCAMP\\\\YW_Amthlete-App\\\\amthlete-app\\\\client\\\\src\\\\pages\\\\Competitions.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport DatePicker from \"react-date-picker\";\nimport { useField, splitFormProps } from \"react-form\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nvar Example = () => {\n  _s();\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      startDate = _useState2[0],\n      setStartDate = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(DatePicker, {\n    selected: startDate,\n    onChange: date => setStartDate(date)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Example, \"7VgZ1AaRN4UkTWnNfs7/CGxziHc=\");\n\n_c = Example;\n\nfunction SelectField(props) {\n  _s2();\n\n  var _splitFormProps = splitFormProps(props),\n      _splitFormProps2 = _slicedToArray(_splitFormProps, 3),\n      field = _splitFormProps2[0],\n      fieldOptions = _splitFormProps2[1],\n      _splitFormProps2$ = _splitFormProps2[2],\n      options = _splitFormProps2$.options,\n      rest = _objectWithoutProperties(_splitFormProps2$, [\"options\"]);\n\n  var _useField = useField(field, fieldOptions),\n      _useField$value = _useField.value,\n      value = _useField$value === void 0 ? \"\" : _useField$value,\n      setValue = _useField.setValue,\n      _useField$meta = _useField.meta,\n      error = _useField$meta.error,\n      isTouched = _useField$meta.isTouched;\n\n  var handleSelectChange = e => {\n    setValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", _objectSpread(_objectSpread({}, rest), {}, {\n      value: value,\n      onChange: handleSelectChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        disabled: true,\n        value: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), \" \", isTouched && error ? /*#__PURE__*/_jsxDEV(\"em\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 29\n    }, this) : null]\n  }, void 0, true);\n} // function SelectField end\n\n\n_s2(SelectField, \"AVss0RFiHMaKjotnYh3T02OYBdI=\", false, function () {\n  return [useField];\n});\n\n_c2 = SelectField;\n\nfunction Competitions() {\n  _s3();\n\n  // Setting our component's initial state\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      competitions = _useState4[0],\n      setCompetitions = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      formObject = _useState6[0],\n      setFormObject = _useState6[1]; // Load all competitions and store them with setCompetitions\n\n\n  useEffect(() => {\n    loadCompetitions();\n  }, []); // Loads all competitions and sets them to competitions\n\n  function loadCompetitions() {\n    API.getCompetitions().then(res => setCompetitions(res.data)).catch(err => console.log(err));\n  }\n\n  ; // function load all competitions end\n  // Deletes a competition from the database with a given id, then reloads competitions from the db\n\n  function deleteCompetition(id) {\n    API.deleteCompetition(id).then(res => loadCompetitions()).catch(err => console.log(err));\n  } // delete competitions function end\n  // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    }));\n  }\n\n  ; // input change function end\n  // When the form is submitted, use the API.saveCompetition method to save the competition data\n  // Then reload competitions from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.eventName && formObject.horse) {\n      API.saveCompetition({\n        eventName: formObject.eventName,\n        eventType: formObject.eventType,\n        horse: formObject.horse,\n        disciplines: formObject.disciplines,\n        penalties: formObject.penalties,\n        place: formObject.place,\n        images: formObject.images,\n        resultNotes: formObject.resultNotes,\n        date: formObject.date\n      }).then(res => loadCompetitions()).catch(err => console.log(err));\n    }\n  }\n\n  ; // save competition data function end\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          size: \"md-6\",\n          children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"What Competitions Should I Enter?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"eventName\",\n            placeholder: \"EventName\\xA0(required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"horse\",\n            placeholder: \"Horse\\xA0(required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Event Type: \", \" \", /*#__PURE__*/_jsxDEV(SelectField, {\n              field: \"eventType\",\n              options: [\"Dressage\", \"Show Jumping\", \"Showing\", \"Horse Trials\", \"Combined Training\"],\n              validate: value => !value ? \"This is required!\" : false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"penalties\",\n            placeholder: \"penalties (optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Place: \", \" \", /*#__PURE__*/_jsxDEV(SelectField, {\n              field: \"place\",\n              options: [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"NIL\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"images\",\n            placeholder: \"upload images (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"resultNotes\",\n            placeholder: \"ResultNotes\\xA0(Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n            onClick: () => handleFormSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), \");\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          size: \"md-6 sm-12\",\n          children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Competitions On My List\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), competitions.length ? /*#__PURE__*/_jsxDEV(List, {\n            children: competitions.map(competition => /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                to: \"/competitions/\" + competition._id,\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [competition.eventName, \" with \", competition.horse]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(DeleteBtn, {\n                onClick: () => deleteCompetition(competition._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 23\n              }, this)]\n            }, competition._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"No Results to Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(Competitions, \"fXLWOaiWJ2xAhHMpcZb2NS/L1GE=\");\n\n_c3 = Competitions;\nexport default Competitions;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Example\");\n$RefreshReg$(_c2, \"SelectField\");\n$RefreshReg$(_c3, \"Competitions\");","map":{"version":3,"sources":["C:/MONASH BOOTCAMP/YW_Amthlete-App/amthlete-app/client/src/pages/Competitions.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","DatePicker","useField","splitFormProps","Example","Date","startDate","setStartDate","date","SelectField","props","field","fieldOptions","options","rest","value","setValue","meta","error","isTouched","handleSelectChange","e","target","map","option","Competitions","competitions","setCompetitions","formObject","setFormObject","loadCompetitions","getCompetitions","then","res","data","catch","err","console","log","deleteCompetition","id","handleInputChange","event","name","handleFormSubmit","preventDefault","eventName","horse","saveCompetition","eventType","disciplines","penalties","place","images","resultNotes","handleSubmit","length","competition","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport {Link} from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport DatePicker from \"react-date-picker\";\nimport { useField, splitFormProps } from \"react-form\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst Example = () => {\n  const [startDate, setStartDate] = useState(new Date());\n  return (\n    <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n  );\n};\n\nfunction SelectField(props) {\n  const [field, fieldOptions, { options, ...rest }] = splitFormProps(props);\n\n  const {\n    value = \"\",\n    setValue,\n    meta: { error, isTouched }\n  } = useField(field, fieldOptions);\n\n  const handleSelectChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <>\n      <select {...rest} value={value} onChange={handleSelectChange}>\n        <option disabled value=\"\" />\n        {options.map(option => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>{\" \"}\n      {isTouched && error ? <em>{error}</em> : null}\n    </>\n  );\n}\n  // function SelectField end\n\n  function Competitions() {\n    // Setting our component's initial state\n    const [competitions, setCompetitions] = useState([])\n    const [formObject, setFormObject] = useState({})\n\n    // Load all competitions and store them with setCompetitions\n    useEffect(() => {\n        loadCompetitions()\n    }, [])\n\n    // Loads all competitions and sets them to competitions\n    function loadCompetitions() {\n        API.getCompetitions()\n            .then(res =>\n                setCompetitions(res.data)\n            )\n            .catch(err => console.log(err));\n    };\n    // function load all competitions end\n\n    // Deletes a competition from the database with a given id, then reloads competitions from the db\n    function deleteCompetition(id) {\n        API.deleteCompetition(id)\n            .then(res => loadCompetitions())\n            .catch(err => console.log(err));\n    }\n    // delete competitions function end\n\n    // Handles updating component state when the user types into the input field\n    function handleInputChange(event) {\n        const {\n            name,\n            value\n        } = event.target;\n        setFormObject({\n            ...formObject,\n            [name]: value\n        })\n    };\n    // input change function end\n\n    // When the form is submitted, use the API.saveCompetition method to save the competition data\n    // Then reload competitions from the database\n    function handleFormSubmit(event) {\n        event.preventDefault();\n        if (formObject.eventName && formObject.horse) {\n            API.saveCompetition({\n                    eventName: formObject.eventName,\n                    eventType: formObject.eventType,\n                    horse: formObject.horse,\n                    disciplines: formObject.disciplines,\n                    penalties: formObject.penalties,\n                    place: formObject.place,\n                    images: formObject.images,\n                    resultNotes: formObject.resultNotes,\n                    date: formObject.date\n                })\n                .then(res => loadCompetitions())\n                .catch(err => console.log(err));\n        }\n    };\n    // save competition data function end\n\n   return (\n    <form onSubmit={handleSubmit}>\n      <Container fluid>\n        <Row>\n          <Col size = \"md-6\" >\n            <Jumbotron>\n              <h1>What Competitions Should I Enter?</h1> \n            </Jumbotron> \n                                \n              <Input \n                onChange={handleInputChange}\n                name=\"eventName\" \n                placeholder=\"EventName (required)\" \n              />\n              <Input\n                onChange={handleInputChange}\n                name=\"horse\"\n                placeholder=\"Horse (required)\" \n              />\n            \n              <label> \n                Event Type: {\" \"} \n                <SelectField \n                  field= \"eventType\"\n                  options= {[\"Dressage\", \"Show Jumping\", \"Showing\", \"Horse Trials\", \"Combined Training\"]}\n                  validate = {value => (!value ? \"This is required!\" : false)}\n                />\n              </label>\n            \n              <Input\n                onChange={handleInputChange}\n                name=\"penalties\"\n                placeholder=\"penalties (optional)\" \n              />\n              \n              <label> \n                Place: {\" \"} \n                <SelectField \n                  field= \"place\"\n                  options= {[\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"NIL\"]}\n                />\n              </label>\n\n              <Input onChange = {handleInputChange}\n                name = \"images\" placeholder = \"upload images (Optional)\" />\n\n              <TextArea onChange = {handleInputChange}\n                name = \"resultNotes\" placeholder = \"ResultNotes (Optional)\" />\n        \n           \n              <DatePicker />\n\n              <FormBtn onClick={() => handleFormSubmit} />\n          \n            );\n\n            </Col>\n\n            <Col size=\"md-6 sm-12\">\n              <Jumbotron>\n                <h1>Competitions On My List</h1>\n              </Jumbotron>\n              {competitions.length ? (\n                <List>\n                  {competitions.map(competition => (\n                    <ListItem key={competition._id}>\n                      <Link to={\"/competitions/\" + competition._id}>\n                        <strong>\n                          {competition.eventName} with {competition.horse}\n                        </strong>\n                      </Link>\n                      <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\n                    </ListItem>\n                  ))}\n                </List>\n              ) : (\n                <h3>No Results to Display</h3>\n              )}\n        </Col>\n      </Row>\n    </Container>\n    </form>\n      );\n    \n  }\n\n  \nexport default Competitions;"]},"metadata":{},"sourceType":"module"}