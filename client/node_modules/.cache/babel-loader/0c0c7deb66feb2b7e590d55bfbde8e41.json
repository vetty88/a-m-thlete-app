{"ast":null,"code":"import _objectSpread from\"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/vetty/AppData/Roaming/npm/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from\"react\";import DeleteBtn from\"../components/DeleteBtn\";import Jumbotron from\"../components/Jumbotron\";import API from\"../utils/API\";import{Link}from\"react-router-dom\";import{Col,Row,Container}from\"../components/Grid\";import{List,ListItem}from\"../components/List\";import{Input,TextArea,FormBtn}from\"../components/Form\";function Competitions(){// Setting our component's initial state\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),competitions=_useState2[0],setCompetitions=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),formObject=_useState4[0],setFormObject=_useState4[1];// Load all books and store them with setBooks\nuseEffect(()=>{loadCompetitions();},[]);// Loads all books and sets them to books\nfunction loadCompetitions(){API.getCompetitions().then(res=>setCompetitions(res.data)).catch(err=>console.log(err));};// Deletes a book from the database with a given id, then reloads books from the db\nfunction deleteCompetition(id){API.deleteCompetition(id).then(res=>loadCompetitions()).catch(err=>console.log(err));}// Handles updating component state when the user types into the input field\nfunction handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setFormObject(_objectSpread(_objectSpread({},formObject),{},{[name]:value}));};// When the form is submitted, use the API.saveCompetition method to save the book data\n// Then reload books from the database\nfunction handleFormSubmit(event){event.preventDefault();if(formObject.eventName&&formObject.horse){API.saveCompetition({title:formObject.eventName,author:formObject.horse,synopsis:formObject.resultNotes}).then(res=>loadCompetitions()).catch(err=>console.log(err));}};return/*#__PURE__*/_jsx(Container,{fluid:true,children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{size:\"md-6\",children:[/*#__PURE__*/_jsx(Jumbotron,{children:/*#__PURE__*/_jsx(\"h1\",{children:\"What Competitions Should I Enter?\"})}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(Input,{onChange:handleInputChange,name:\"eventName\",placeholder:\"EventName (required)\"}),/*#__PURE__*/_jsx(Input,{onChange:handleInputChange,name:\"horse\",placeholder:\"Horse (required)\"}),/*#__PURE__*/_jsx(TextArea,{onChange:handleInputChange,name:\"resultNotes\",placeholder:\"ResultNotes (Optional)\"}),/*#__PURE__*/_jsx(FormBtn,{disabled:!(formObject.horse&&formObject.eventName),onClick:handleFormSubmit,children:\"Submit Competition\"})]})]}),/*#__PURE__*/_jsxs(Col,{size:\"md-6 sm-12\",children:[/*#__PURE__*/_jsx(Jumbotron,{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Competitions On My List\"})}),competitions.length?/*#__PURE__*/_jsx(List,{children:competitions.map(competition=>/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(Link,{to:\"/competitions/\"+competition._id,children:/*#__PURE__*/_jsxs(\"strong\",{children:[competition.eventName,\" by \",competition.horse]})}),/*#__PURE__*/_jsx(DeleteBtn,{onClick:()=>deleteCompetition(competition._id)})]},competition._id))}):/*#__PURE__*/_jsx(\"h3\",{children:\"No Results to Display\"})]})]})});}export default Competitions;","map":{"version":3,"sources":["C:/MONASH BOOTCAMP/YW_Amthlete-App/client/src/pages/Competitions.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Competitions","competitions","setCompetitions","formObject","setFormObject","loadCompetitions","getCompetitions","then","res","data","catch","err","console","log","deleteCompetition","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","eventName","horse","saveCompetition","title","author","synopsis","resultNotes","length","map","competition","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Competitions() {\n  // Setting our component's initial state\n  const [competitions, setCompetitions] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadCompetitions()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadCompetitions() {\n    API.getCompetitions()\n      .then(res => \n        setCompetitions(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteCompetition(id) {\n    API.deleteCompetition(id)\n      .then(res => loadCompetitions())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveCompetition method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.eventName && formObject.horse) {\n      API.saveCompetition({\n        title: formObject.eventName,\n        author: formObject.horse,\n        synopsis: formObject.resultNotes\n      })\n        .then(res => loadCompetitions())\n        .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Competitions Should I Enter?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"eventName\"\n                placeholder=\"EventName (required)\"\n              />\n              <Input\n                onChange={handleInputChange}\n                name=\"horse\"\n                placeholder=\"Horse (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"resultNotes\"\n                placeholder=\"ResultNotes (Optional)\"\n              />\n              <FormBtn\n                disabled={!(formObject.horse && formObject.eventName)}\n                onClick={handleFormSubmit}\n              >\n                Submit Competition\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Competitions On My List</h1>\n            </Jumbotron>\n            {competitions.length ? (\n              <List>\n                {competitions.map(competition => (\n                  <ListItem key={competition._id}>\n                    <Link to={\"/competitions/\" + competition._id}>\n                      <strong>\n                        {competition.eventName} by {competition.horse}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Competitions;\n"]},"metadata":{},"sourceType":"module"}