{"ast":null,"code":"import _objectSpread from\"C:/Users/yvett/Documents/GitHub/amthlete-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/yvett/Documents/GitHub/amthlete-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import DeleteBtn from\"../components/DeleteBtn\";import Jumbotron from\"../components/Jumbotron\";import API from\"../utils/API\";import{Link}from\"react-router-dom\";import{Col,Row,Container}from\"../components/Grid\";import{List,ListItem}from\"../components/List\";import{Input,TextArea,FormBtn}from\"../components/Form\";// import DatePicker from \"react-date-picker\";\nimport Select from'react-select';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const eventTypeOptions=[{value:'dressage',label:'Dressage'},{value:'showJumping',label:'Show Jumping'},{value:'showing',label:'Showing'},{value:'horseTrials',label:'Horse Trials'},{value:'combinedTraining',label:'Combined Training'}];// const [startDate, setStartDate] = useState(new Date());\nfunction Competitions(){// Setting our component's initial state\nconst _useState=useState([]),_useState2=_slicedToArray(_useState,2),competitions=_useState2[0],setCompetitions=_useState2[1];const _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),formObject=_useState4[0],setFormObject=_useState4[1];// Load all books and store them with setBooks\nuseEffect(()=>{loadCompetitions();},[]);// Loads all books and sets them to books\nfunction loadCompetitions(){API.getCompetitions().then(res=>setCompetitions(res.data)).catch(err=>console.log(err));}// Deletes a competition from the database with a given id, then reloads books from the db\nfunction deleteCompetition(id){API.deleteCompetition(id).then(res=>loadCompetitions()).catch(err=>console.log(err));}// Handles updating component state when the user types into the input field\nfunction handleInputChange(event){const _event$target=event.target,name=_event$target.name,value=_event$target.value;setFormObject(_objectSpread(_objectSpread({},formObject),{},{[name]:value}));}// When the form is submitted, use the API.saveCompetition method to save the competition data\n// Then reload books from the database\nfunction handleFormSubmit(event){event.preventDefault();if(formObject.eventName&&formObject.horse){API.saveCompetition({eventName:formObject.eventName,eventType:formObject.eventType,horse:formObject.horse,disciplines:formObject.disciplines,penalties:formObject.penalties,place:formObject.place,images:formObject.images,resultNotes:formObject.resultNotes,date:formObject.date}).then(res=>loadCompetitions()).catch(err=>console.log(err));}}return/*#__PURE__*/_jsx(Container,{fluid:true,children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{size:\"md-6\",children:[/*#__PURE__*/_jsx(Jumbotron,{children:/*#__PURE__*/_jsx(\"h1\",{children:\"What Competitions Should I Enter?\"})}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(Input,{onChange:handleInputChange,name:\"eventName\",placeholder:\"EventName (required)\"}),\"Event Type:\",/*#__PURE__*/_jsx(Select,{onClick:handleInputChange,name:\"eventType\",placeholder:\"EventType (required)\",options:eventTypeOptions}),/*#__PURE__*/_jsx(Input,{onChange:handleInputChange,name:\"horse\",placeholder:\"Horse (required)\"}),/*#__PURE__*/_jsx(TextArea,{onChange:handleInputChange,name:\"resultNotes\",placeholder:\"ResultNotes (Optional)\"}),/*#__PURE__*/_jsx(FormBtn,{disabled:!(formObject.eventName&&formObject.horse),onClick:handleFormSubmit,children:\"Submit Competition\"})]})]}),/*#__PURE__*/_jsxs(Col,{size:\"md-6 sm-12\",children:[/*#__PURE__*/_jsx(Jumbotron,{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Competitions On My List\"})}),competitions.length?/*#__PURE__*/_jsx(List,{children:competitions.map(competition=>/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(Link,{to:\"/competitions/\"+competition._id,children:/*#__PURE__*/_jsxs(\"strong\",{children:[competition.eventName,\" with \",competition.horse]})}),/*#__PURE__*/_jsx(DeleteBtn,{onClick:()=>deleteCompetition(competition._id)})]},competition._id))}):/*#__PURE__*/_jsx(\"h3\",{children:\"No Results to Display\"})]})]})});}// end Competitions function\nexport default Competitions;","map":{"version":3,"sources":["C:/Users/yvett/Documents/GitHub/amthlete-app/client/src/pages/Competitions.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Select","eventTypeOptions","value","label","Competitions","competitions","setCompetitions","formObject","setFormObject","loadCompetitions","getCompetitions","then","res","data","catch","err","console","log","deleteCompetition","id","handleInputChange","event","target","name","handleFormSubmit","preventDefault","eventName","horse","saveCompetition","eventType","disciplines","penalties","place","images","resultNotes","date","length","map","competition","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n// import DatePicker from \"react-date-picker\";\r\nimport Select from 'react-select';\r\n\r\nconst eventTypeOptions = [\r\n  { value: 'dressage', label: 'Dressage' }, \r\n  { value:'showJumping', label: 'Show Jumping' },\r\n  { value: 'showing', label: 'Showing' },\r\n  { value: 'horseTrials', label: 'Horse Trials' }, \r\n  { value: 'combinedTraining', label: 'Combined Training' }\r\n];\r\n\r\n  // const [startDate, setStartDate] = useState(new Date());\r\n\r\n\r\nfunction Competitions() {\r\n  // Setting our component's initial state\r\n  const [competitions, setCompetitions] = useState([]);\r\n  const [formObject, setFormObject] = useState({});\r\n\r\n  // Load all books and store them with setBooks\r\n  useEffect(() => {\r\n    loadCompetitions();\r\n  }, []);\r\n\r\n  // Loads all books and sets them to books\r\n  function loadCompetitions() {\r\n    API.getCompetitions()\r\n      .then(res => \r\n        setCompetitions(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  // Deletes a competition from the database with a given id, then reloads books from the db\r\n  function deleteCompetition(id) {\r\n    API.deleteCompetition(id)\r\n      .then(res => loadCompetitions())\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  // Handles updating component state when the user types into the input field\r\n  function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({...formObject, [name]: value});\r\n  }\r\n\r\n  // When the form is submitted, use the API.saveCompetition method to save the competition data\r\n  // Then reload books from the database\r\n  function handleFormSubmit(event) {\r\n    event.preventDefault();\r\n  if (formObject.eventName && formObject.horse) {\r\n      API.saveCompetition({\r\n              eventName: formObject.eventName,\r\n              eventType: formObject.eventType,\r\n              horse: formObject.horse,\r\n              disciplines: formObject.disciplines,\r\n              penalties: formObject.penalties,\r\n              place: formObject.place,\r\n              images: formObject.images,\r\n              resultNotes: formObject.resultNotes,\r\n              date: formObject.date\r\n          })\r\n          .then(res => loadCompetitions())\r\n          .catch(err => console.log(err));\r\n    }\r\n  }\r\n\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-6\">\r\n            <Jumbotron>\r\n              <h1>What Competitions Should I Enter?</h1>\r\n            </Jumbotron>\r\n            <form>\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"eventName\"\r\n                placeholder=\"EventName (required)\"\r\n              />\r\n\r\n            Event Type:\r\n            <Select \r\n             onClick={handleInputChange}\r\n             name=\"eventType\"\r\n             placeholder=\"EventType (required)\"\r\n              options={eventTypeOptions} />\r\n   \r\n             <Input\r\n                onChange={handleInputChange}\r\n                name=\"horse\"\r\n                placeholder=\"Horse (required)\"\r\n              />\r\n              <TextArea\r\n                onChange={handleInputChange}\r\n                name=\"resultNotes\"\r\n                placeholder=\"ResultNotes (Optional)\"\r\n              />\r\n\r\n              <FormBtn\r\n                disabled={!(formObject.eventName && formObject.horse)}\r\n                onClick={handleFormSubmit}\r\n              >\r\n                Submit Competition\r\n              </FormBtn>\r\n            </form>\r\n          </Col>\r\n          <Col size=\"md-6 sm-12\">\r\n            <Jumbotron>\r\n              <h1>Competitions On My List</h1>\r\n            </Jumbotron>\r\n            {competitions.length ? (\r\n              <List>\r\n                {competitions.map(competition => (\r\n                  <ListItem key={competition._id}>\r\n                    <Link to={\"/competitions/\" + competition._id}>\r\n                      <strong>\r\n                        {competition.eventName} with {competition.horse}\r\n                      </strong>\r\n                    </Link>\r\n                    <DeleteBtn onClick={() => deleteCompetition(competition._id)} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            ) : (\r\n              <h3>No Results to Display</h3>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n  // end Competitions function\r\n\r\n\r\nexport default Competitions;"]},"metadata":{},"sourceType":"module"}