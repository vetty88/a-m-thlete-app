{"version":3,"file":"hubextensions.js","sourceRoot":"","sources":["../src/hubextensions.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMainCarrier, Hub } from '@sentry/hub';\nimport { CustomSamplingContext, SamplingContext, TransactionContext, TransactionSamplingMethod } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(hub: Hub, transaction: T, samplingContext: SamplingContext): T {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  // nothing to do if there's no client or if tracing is disabled\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: TransactionSamplingMethod.Explicit },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Sampler,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: TransactionSamplingMethod.Inheritance },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Rate,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(`[Tracing] Discarding transaction because of invalid sample rate.`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\n      `[Tracing] Discarding transaction because ${\n        typeof options.tracesSampler === 'function'\n          ? 'tracesSampler returned 0 or false'\n          : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n      }`,\n    );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\n      `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n        sampleRate,\n      )})`,\n    );\n    return transaction;\n  }\n\n  // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n  transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n\n  logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\n      `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n        rate,\n      )} of type ${JSON.stringify(typeof rate)}.`,\n    );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"]}