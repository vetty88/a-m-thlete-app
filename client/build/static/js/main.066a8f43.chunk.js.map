{"version":3,"sources":["registerServiceWorker.js","Layout/AppMain/index.js","DemoPages/Main/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Dashboards","lazy","Widgets","Elements","Components","Charts","Forms","Tables","AppMain","fallback","className","path","component","exact","render","to","Main","React","Component","constructor","props","super","this","state","closedSmallerSidebar","colorScheme","enableFixedHeader","enableFixedSidebar","enableFixedFooter","enableClosedSidebar","handleWidth","width","cx","withRouter","connect","rootElement","document","getElementById","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAUoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4ECTN,MAAMC,EAAaC,eAAK,IAAM,2EAExBC,EAAUD,eAAK,IAAM,0EACrBE,EAAWF,eAAK,IAAM,oEACtBG,EAAaH,eAAK,IAAM,4EACxBI,EAASJ,eAAK,IAAM,4EACpBK,EAAQL,eAAK,IAAM,6DACnBM,EAASN,eAAK,IAAM,sDAwHXO,MAtHC,IAGR,kBAAC,WAAD,KAII,kBAAC,WAAD,CAAUC,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,wDAEI,4JAKZ,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWR,KAKzC,kBAAC,WAAD,CAAUK,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,mDAEI,uJAKZ,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWN,KAKpC,kBAAC,WAAD,CAAUG,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,oDAEI,wJAKZ,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWP,KAKrC,kBAAC,WAAD,CAAUI,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,oDAEI,wJAKZ,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWL,KAKrC,kBAAC,WAAD,CAAUE,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,sDAEI,0JAKZ,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWT,KAKvC,kBAAC,WAAD,CAAUM,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,+DAEI,mKAKZ,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWV,KAKtC,kBAAC,WAAD,CAAUO,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,wDAEI,6JAKZ,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWZ,KAGzC,kBAAC,IAAD,CAAOa,OAAK,EAACF,KAAK,IAAIG,OAAQ,IAC1B,kBAAC,IAAD,CAAUC,GAAG,wBAEjB,kBAAC,iBAAD,OCxHZ,MAAMC,UAAaC,IAAMC,UACrBC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,MAAQ,CACTC,sBAAsB,GAK9BV,SAAU,IAAD,EAQDQ,KAAKF,MANLK,EAFC,EAEDA,YACAC,EAHC,EAGDA,kBACAC,EAJC,EAIDA,mBACAC,EALC,EAKDA,kBACAC,EANC,EAMDA,oBACAL,EAPC,EAODA,qBAGJ,OACI,kBAAC,IAAD,CACIM,aAAW,EACXhB,OAAQ,EAAGiB,WACP,kBAAC,WAAD,KACI,yBAAKrB,UAAWsB,IACZ,2BAA6BP,EAC7B,CAAC,eAAgBC,GACjB,CAAC,gBAAiBC,GAAsBI,EAAQ,MAChD,CAAC,eAAgBH,GACjB,CAAC,iBAAkBC,GAAuBE,EAAQ,MAClD,CAAC,wBAAyBP,GAAwBO,EAAQ,QAG1D,kBAAC,EAAD,WAWbE,kBAAWC,YAAQlB,ICzClC,MAAMmB,EAAcC,SAASC,eAAe,QAE1BnB,QAWRF,EAVRsB,IAASxB,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACI,EAAD,QAGJiB,GHiFE,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.066a8f43.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {BrowserRouter as Route, Redirect} from 'react-router-dom';\r\nimport React, {Suspense, lazy, Fragment} from 'react';\r\n\r\nimport {\r\n    ToastContainer,\r\n} from 'react-toastify';\r\n\r\nconst Dashboards = lazy(() => import('../../DemoPages/Dashboards'));\r\n\r\nconst Widgets = lazy(() => import('../../DemoPages/Widgets'));\r\nconst Elements = lazy(() => import('../../DemoPages/Elements'));\r\nconst Components = lazy(() => import('../../DemoPages/Components'));\r\nconst Charts = lazy(() => import('../../DemoPages/Charts'));\r\nconst Forms = lazy(() => import('../../DemoPages/Forms'));\r\nconst Tables = lazy(() => import('../../DemoPages/Tables'));\r\n\r\nconst AppMain = () => {\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {/* Components */}\r\n\r\n            <Suspense fallback={\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader-container-inner\">\r\n                        <h6 className=\"mt-5\">\r\n                            Please wait while we load all the Components examples\r\n                            <small>Because this is a demonstration we load at once all the Components examples. This wouldn't happen in a real live app!</small>\r\n                        </h6>\r\n                    </div>\r\n                </div>\r\n            }>\r\n                <Route path=\"/components\" component={Components}/>\r\n            </Suspense>\r\n\r\n            {/* Forms */}\r\n\r\n            <Suspense fallback={\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader-container-inner\">\r\n                        <h6 className=\"mt-5\">\r\n                            Please wait while we load all the Forms examples\r\n                            <small>Because this is a demonstration we load at once all the Forms examples. This wouldn't happen in a real live app!</small>\r\n                        </h6>\r\n                    </div>\r\n                </div>\r\n            }>\r\n                <Route path=\"/forms\" component={Forms}/>\r\n            </Suspense>\r\n\r\n            {/* Charts */}\r\n\r\n            <Suspense fallback={\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader-container-inner\">\r\n                        <h6 className=\"mt-3\">\r\n                            Please wait while we load all the Charts examples\r\n                            <small>Because this is a demonstration we load at once all the Charts examples. This wouldn't happen in a real live app!</small>\r\n                        </h6>\r\n                    </div>\r\n                </div>\r\n            }>\r\n                <Route path=\"/charts\" component={Charts}/>\r\n            </Suspense>\r\n\r\n            {/* Tables */}\r\n\r\n            <Suspense fallback={\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader-container-inner\">\r\n                        <h6 className=\"mt-5\">\r\n                            Please wait while we load all the Tables examples\r\n                            <small>Because this is a demonstration we load at once all the Tables examples. This wouldn't happen in a real live app!</small>\r\n                        </h6>\r\n                    </div>\r\n                </div>\r\n            }>\r\n                <Route path=\"/tables\" component={Tables}/>\r\n            </Suspense>\r\n\r\n            {/* Elements */}\r\n\r\n            <Suspense fallback={\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader-container-inner\">\r\n                        <h6 className=\"mt-3\">\r\n                            Please wait while we load all the Elements examples\r\n                            <small>Because this is a demonstration we load at once all the Elements examples. This wouldn't happen in a real live app!</small>\r\n                        </h6>\r\n                    </div>\r\n                </div>\r\n            }>\r\n                <Route path=\"/elements\" component={Elements}/>\r\n            </Suspense>\r\n\r\n            {/* Dashboard Widgets */}\r\n\r\n            <Suspense fallback={\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader-container-inner\">\r\n                        <h6 className=\"mt-3\">\r\n                            Please wait while we load all the Dashboard Widgets examples\r\n                            <small>Because this is a demonstration we load at once all the Dashboard Widgets examples. This wouldn't happen in a real live app!</small>\r\n                        </h6>\r\n                    </div>\r\n                </div>\r\n            }>\r\n                <Route path=\"/widgets\" component={Widgets}/>\r\n            </Suspense>\r\n\r\n            {/* Dashboards */}\r\n\r\n            <Suspense fallback={\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader-container-inner\">\r\n                        <h6 className=\"mt-3\">\r\n                            Please wait while we load all the Dashboards examples\r\n                            <small>Because this is a demonstration, we load at once all the Dashboards examples. This wouldn't happen in a real live app!</small>\r\n                        </h6>\r\n                    </div>\r\n                </div>\r\n            }>\r\n                <Route path=\"/dashboards\" component={Dashboards}/>\r\n            </Suspense>\r\n\r\n            <Route exact path=\"/\" render={() => (\r\n                <Redirect to=\"/dashboards/basic\"/>\r\n            )}/>\r\n            <ToastContainer/>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default AppMain;","import React, {Fragment} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cx from 'classnames';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport ResizeDetector from 'react-resize-detector';\r\n\r\nimport AppMain from '../../Layout/AppMain';\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            closedSmallerSidebar: false\r\n        };\r\n\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            colorScheme,\r\n            enableFixedHeader,\r\n            enableFixedSidebar,\r\n            enableFixedFooter,\r\n            enableClosedSidebar,\r\n            closedSmallerSidebar,\r\n        } = this.props;\r\n\r\n        return (\r\n            <ResizeDetector\r\n                handleWidth\r\n                render={({ width }) => (\r\n                    <Fragment>\r\n                        <div className={cx(\r\n                            \"app-container app-theme-\" + colorScheme,\r\n                            {'fixed-header': enableFixedHeader},\r\n                            {'fixed-sidebar': enableFixedSidebar || width < 1250},\r\n                            {'fixed-footer': enableFixedFooter},\r\n                            {'closed-sidebar': enableClosedSidebar || width < 1250},\r\n                            {'closed-sidebar-mobile': closedSmallerSidebar || width < 1250},\r\n                            \r\n                        )}>\r\n                            <AppMain/>\r\n                        </div>\r\n                    </Fragment>\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(connect(Main));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import registerServiceWorker from './registerServiceWorker';\r\nimport { unregister } from './registerServiceWorker';\r\n\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './assets/base.css';\r\nimport Main from './DemoPages/Main';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nconst renderApp = Component => {\r\n  ReactDOM.render(\r\n    <Provider>\r\n      <HashRouter>\r\n        <Component />\r\n      </HashRouter>\r\n    </Provider>,\r\n    rootElement\r\n  );\r\n};\r\n\r\nrenderApp(Main);\r\n\r\nif (module.hot) {\r\n  module.hot.accept('./DemoPages/Main', () => {\r\n    const NextApp = require('./DemoPages/Main').default;\r\n    renderApp(NextApp);\r\n  });\r\n}\r\nunregister();\r\n\r\n// registerServiceWorker();\r\n\r\n"],"sourceRoot":""}