{"version":3,"sources":["registerServiceWorker.js","Layout/AppMain/index.js","DemoPages/Main/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Dashboards","lazy","Widgets","Elements","Components","Charts","Forms","Tables","AppMain","fallback","className","path","component","exact","render","to","Main","React","Component","constructor","props","super","this","state","closedSmallerSidebar","colorScheme","enableFixedHeader","enableFixedSidebar","enableFixedFooter","enableClosedSidebar","handleWidth","width","cx","withRouter","connect","rootElement","document","getElementById","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAUoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4ECTN,MAAMC,EAAaC,eAAK,IAAM,2EAExBC,EAAUD,eAAK,IAAM,0EACrBE,EAAWF,eAAK,IAAM,oEACtBG,EAAaH,eAAK,IAAM,4EACxBI,EAASJ,eAAK,IAAM,4EACpBK,EAAQL,eAAK,IAAM,6DACnBM,EAASN,eAAK,IAAM,sDAwHXO,MAtHC,IAGR,kBAAC,WAAD,KAII,kBAAC,WAAD,CAAUC,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,wDAEI,4JAKZ,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWR,KAKzC,kBAAC,WAAD,CAAUK,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,mDAEI,uJAKZ,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWN,KAKpC,kBAAC,WAAD,CAAUG,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,oDAEI,wJAKZ,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWP,KAKrC,kBAAC,WAAD,CAAUI,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,oDAEI,wJAKZ,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWL,KAKrC,kBAAC,WAAD,CAAUE,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,sDAEI,0JAKZ,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWT,KAKvC,kBAAC,WAAD,CAAUM,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,+DAEI,mKAKZ,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWV,KAKtC,kBAAC,WAAD,CAAUO,SACN,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,QAAd,wDAEI,6JAKZ,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWZ,KAGzC,kBAAC,IAAD,CAAOa,OAAK,EAACF,KAAK,IAAIG,OAAQ,IAC1B,kBAAC,IAAD,CAAUC,GAAG,wBAEjB,kBAAC,iBAAD,OCxHZ,MAAMC,UAAaC,IAAMC,UACrBC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,MAAQ,CACTC,sBAAsB,GAK9BV,SAAU,IAAD,EAQDQ,KAAKF,MANLK,EAFC,EAEDA,YACAC,EAHC,EAGDA,kBACAC,EAJC,EAIDA,mBACAC,EALC,EAKDA,kBACAC,EANC,EAMDA,oBACAL,EAPC,EAODA,qBAGJ,OACI,kBAAC,IAAD,CACIM,aAAW,EACXhB,OAAQ,EAAGiB,WACP,kBAAC,WAAD,KACI,yBAAKrB,UAAWsB,IACZ,2BAA6BP,EAC7B,CAAC,eAAgBC,GACjB,CAAC,gBAAiBC,GAAsBI,EAAQ,MAChD,CAAC,eAAgBH,GACjB,CAAC,iBAAkBC,GAAuBE,EAAQ,MAClD,CAAC,wBAAyBP,GAAwBO,EAAQ,QAG1D,kBAAC,EAAD,WAWbE,kBAAWC,kBAAQlB,ICzClC,MAAMmB,EAAcC,SAASC,eAAe,QAE1BnB,QAWRF,EAVRsB,IAASxB,OACP,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAACI,EAAD,QAGJiB,GHiFE,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.e5aae391.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {BrowserRouter as Route, Redirect} from 'react-router-dom';\nimport React, {Suspense, lazy, Fragment} from 'react';\n\nimport {\n    ToastContainer,\n} from 'react-toastify';\n\nconst Dashboards = lazy(() => import('../../DemoPages/Dashboards'));\n\nconst Widgets = lazy(() => import('../../DemoPages/Widgets'));\nconst Elements = lazy(() => import('../../DemoPages/Elements'));\nconst Components = lazy(() => import('../../DemoPages/Components'));\nconst Charts = lazy(() => import('../../DemoPages/Charts'));\nconst Forms = lazy(() => import('../../DemoPages/Forms'));\nconst Tables = lazy(() => import('../../DemoPages/Tables'));\n\nconst AppMain = () => {\n\n    return (\n        <Fragment>\n\n            {/* Components */}\n\n            <Suspense fallback={\n                <div className=\"loader-container\">\n                    <div className=\"loader-container-inner\">\n                        <h6 className=\"mt-5\">\n                            Please wait while we load all the Components examples\n                            <small>Because this is a demonstration we load at once all the Components examples. This wouldn't happen in a real live app!</small>\n                        </h6>\n                    </div>\n                </div>\n            }>\n                <Route path=\"/components\" component={Components}/>\n            </Suspense>\n\n            {/* Forms */}\n\n            <Suspense fallback={\n                <div className=\"loader-container\">\n                    <div className=\"loader-container-inner\">\n                        <h6 className=\"mt-5\">\n                            Please wait while we load all the Forms examples\n                            <small>Because this is a demonstration we load at once all the Forms examples. This wouldn't happen in a real live app!</small>\n                        </h6>\n                    </div>\n                </div>\n            }>\n                <Route path=\"/forms\" component={Forms}/>\n            </Suspense>\n\n            {/* Charts */}\n\n            <Suspense fallback={\n                <div className=\"loader-container\">\n                    <div className=\"loader-container-inner\">\n                        <h6 className=\"mt-3\">\n                            Please wait while we load all the Charts examples\n                            <small>Because this is a demonstration we load at once all the Charts examples. This wouldn't happen in a real live app!</small>\n                        </h6>\n                    </div>\n                </div>\n            }>\n                <Route path=\"/charts\" component={Charts}/>\n            </Suspense>\n\n            {/* Tables */}\n\n            <Suspense fallback={\n                <div className=\"loader-container\">\n                    <div className=\"loader-container-inner\">\n                        <h6 className=\"mt-5\">\n                            Please wait while we load all the Tables examples\n                            <small>Because this is a demonstration we load at once all the Tables examples. This wouldn't happen in a real live app!</small>\n                        </h6>\n                    </div>\n                </div>\n            }>\n                <Route path=\"/tables\" component={Tables}/>\n            </Suspense>\n\n            {/* Elements */}\n\n            <Suspense fallback={\n                <div className=\"loader-container\">\n                    <div className=\"loader-container-inner\">\n                        <h6 className=\"mt-3\">\n                            Please wait while we load all the Elements examples\n                            <small>Because this is a demonstration we load at once all the Elements examples. This wouldn't happen in a real live app!</small>\n                        </h6>\n                    </div>\n                </div>\n            }>\n                <Route path=\"/elements\" component={Elements}/>\n            </Suspense>\n\n            {/* Dashboard Widgets */}\n\n            <Suspense fallback={\n                <div className=\"loader-container\">\n                    <div className=\"loader-container-inner\">\n                        <h6 className=\"mt-3\">\n                            Please wait while we load all the Dashboard Widgets examples\n                            <small>Because this is a demonstration we load at once all the Dashboard Widgets examples. This wouldn't happen in a real live app!</small>\n                        </h6>\n                    </div>\n                </div>\n            }>\n                <Route path=\"/widgets\" component={Widgets}/>\n            </Suspense>\n\n            {/* Dashboards */}\n\n            <Suspense fallback={\n                <div className=\"loader-container\">\n                    <div className=\"loader-container-inner\">\n                        <h6 className=\"mt-3\">\n                            Please wait while we load all the Dashboards examples\n                            <small>Because this is a demonstration, we load at once all the Dashboards examples. This wouldn't happen in a real live app!</small>\n                        </h6>\n                    </div>\n                </div>\n            }>\n                <Route path=\"/dashboards\" component={Dashboards}/>\n            </Suspense>\n\n            <Route exact path=\"/\" render={() => (\n                <Redirect to=\"/dashboards/basic\"/>\n            )}/>\n            <ToastContainer/>\n        </Fragment>\n    )\n};\n\nexport default AppMain;","import React, {Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport cx from 'classnames';\nimport {withRouter} from 'react-router-dom';\n\nimport ResizeDetector from 'react-resize-detector';\n\nimport AppMain from '../../Layout/AppMain';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            closedSmallerSidebar: false\n        };\n\n    }\n\n    render() {\n        let {\n            colorScheme,\n            enableFixedHeader,\n            enableFixedSidebar,\n            enableFixedFooter,\n            enableClosedSidebar,\n            closedSmallerSidebar,\n        } = this.props;\n\n        return (\n            <ResizeDetector\n                handleWidth\n                render={({ width }) => (\n                    <Fragment>\n                        <div className={cx(\n                            \"app-container app-theme-\" + colorScheme,\n                            {'fixed-header': enableFixedHeader},\n                            {'fixed-sidebar': enableFixedSidebar || width < 1250},\n                            {'fixed-footer': enableFixedFooter},\n                            {'closed-sidebar': enableClosedSidebar || width < 1250},\n                            {'closed-sidebar-mobile': closedSmallerSidebar || width < 1250},\n                            \n                        )}>\n                            <AppMain/>\n                        </div>\n                    </Fragment>\n                )}\n            />\n        )\n    }\n}\n\n\n\nexport default withRouter(connect(Main));","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import registerServiceWorker from './registerServiceWorker';\nimport { unregister } from './registerServiceWorker';\n\nimport { HashRouter } from 'react-router-dom';\nimport './assets/base.css';\nimport Main from './DemoPages/Main';\n\nimport { Provider } from 'react-redux';\n\n\nconst rootElement = document.getElementById('root');\n\nconst renderApp = Component => {\n  ReactDOM.render(\n    <Provider>\n      <HashRouter>\n        <Component />\n      </HashRouter>\n    </Provider>,\n    rootElement\n  );\n};\n\nrenderApp(Main);\n\nif (module.hot) {\n  module.hot.accept('./DemoPages/Main', () => {\n    const NextApp = require('./DemoPages/Main').default;\n    renderApp(NextApp);\n  });\n}\nunregister();\n\n// registerServiceWorker();\n\n"],"sourceRoot":""}