{"version":3,"sources":["utils/setAuthToken.js","actions/types.js","actions/authActions.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","layouts/Landing.js","utils/API.js","components/Grid/index.js","components/List/List.js","components/Forms/UserForm.js","assets/jss/material-dashboard-react.js","assets/jss/material-dashboard-react/components/cardStyle.js","components/Card/Card.js","assets/jss/material-dashboard-react/components/cardBodyStyle.js","components/Card/CardBody.js","assets/jss/material-dashboard-react/components/cardFooterStyle.js","components/Card/CardFooter.js","assets/jss/material-dashboard-react/components/cardHeaderStyle.js","components/Card/CardHeader.js","components/Buttons/DeleteBtn.js","components/Grid/GridContainer.js","components/Grid/GridItem.js","views/Register/Register.js","views/Login/Login.js","views/PrivateRoute/PrivateRoute.js","assets/jss/material-dashboard-react/components/cardIconStyle.js","components/Card/CardIcon.js","components/Jumbotron/Jumbotron.js","assets/jss/material-dashboard-react/views/rtlStyle.js","views/HorseDetail/HorseDetail.js","views/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","GET_ERRORS","USER_LOADING","SET_CURRENT_USER","setCurrentUser","decoded","type","payload","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","Landing","to","Component","get","userData","post","Row","fluid","children","className","Col","size","split","map","join","List","ListItem","TextInput","props","FormBtn","style","float","marginBottom","hexToRgb","input","replace","test","length","Error","first","second","last","toUpperCase","parseInt","primaryColor","warningColor","dangerColor","successColor","infoColor","roseColor","grayColor","blackColor","whiteColor","primaryBoxShadow","boxShadow","infoBoxShadow","successBoxShadow","warningBoxShadow","dangerBoxShadow","roseBoxShadow","warningCardHeader","background","successCardHeader","dangerCardHeader","infoCardHeader","primaryCardHeader","roseCardHeader","title","margin","paddingTop","borderTop","height","fontFamily","fontWeight","lineHeight","color","textDecoration","marginTop","minHeight","cardStyle","card","border","borderRadius","width","position","display","flexDirection","minWidth","wordWrap","fontSize","cardPlain","cardProfile","textAlign","cardChart","useStyles","makeStyles","styles","Card","classes","plain","profile","chart","rest","cardClasses","classNames","undefined","cardBodyStyle","cardBody","padding","flex","WebkitBoxFlex","cardBodyPlain","paddingLeft","paddingRight","cardBodyProfile","CardBody","cardBodyClasses","cardFooterStyle","cardFooter","justifyContent","alignItems","backgroundColor","cardFooterProfile","cardFooterPlain","cardFooterStats","top","marginRight","marginLeft","cardFooterChart","CardFooter","stats","cardFooterClasses","cardHeaderStyle","cardHeader","borderBottom","zIndex","overflow","cardHeaderPlain","cardHeaderStats","cardHeaderIcon","CardHeader","icon","cardHeaderClasses","DeleteBtn","role","tabIndex","grid","GridContainer","Grid","container","GridItem","item","Register","useState","users","setUsers","formObject","setFormObject","cardCategoryWhite","cardTitleWhite","loadUsers","API","then","res","data","catch","err","console","log","handleInputChange","event","target","name","value","useEffect","xs","sm","md","label","id","defaultValue","onChange","placeholder","disabled","email","onClick","preventDefault","password","date","Date","this","deleteUser","emal","Login","e","setState","onSubmit","loginUser","history","push","nextProps","letterSpacing","noValidate","autoComplete","required","error","classnames","invalid","emailnotfound","htmlFor","passwordincorrect","connect","dispatch","localStorage","setItem","jwt_decode","response","component","render","cardIconStyle","cardIcon","Jumbotron","rtlStyle","successText","upArrowCardCategory","cardCategory","cardTitle","HorseDetail","horses","setHorses","horse","faHorse","uniqueName","faBaby","birthYear","faRuler","faHorseHead","breed","faPalette","colour","Dashboard","onLogoutClick","logoutUser","removeItem","App","exact","path","PrivateRoute","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02457426.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply authorization token to every request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\nexport default setAuthToken;","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\n// export const GET_ERRORS = 'GET_ERRORS';\r\n// export const SET_CURRENT_USER = 'SET_CURRENT_USER';\r\n// export const CSRF_TOKEN = 'CSRF_TOKEN';\r\n\r\n// export const GET_USER_COUNT = 'GET_USER_COUNT';\r\n// export const GET_USERS = 'GET_USERS';\r\n// export const GET_USER = 'GET_USER';\r\n// export const GET_USER_DATA = 'GET_USER_DATA';\r\n\r\n","import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users\", userData)\r\n    // .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n\r\n// import axios from 'axios';\r\n// import setAuthToken from '../utils/setAuthToken';\r\n\r\n// // jwt-decode module is used to decode the user data from auth token\r\n// import jwt_decode from 'jwt-decode';\r\n// import { GET_ERRORS, SET_CURRENT_USER, GET_USER_COUNT, CSRF_TOKEN, GET_USERS, GET_USER, GET_USER_DATA } from './types';\r\n// // axios.defaults.xsrfCookieName = 'csrftoken';\r\n// // axios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\n// // Get the csrf token\r\n// export const getCsrfToken = () => dispatch => {\r\n// \t// dispatch(setPostLoading());\r\n// \taxios\r\n// \t\t.get('/api/users/getCsrfToken')\r\n// \t\t.then( res =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: CSRF_TOKEN,\r\n// \t\t\t\tpayload: res.data\r\n// \t\t\t})\r\n// \t\t)\r\n// \t\t.catch( err =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: CSRF_TOKEN,\r\n// \t\t\t\tpayload: null\r\n// \t\t\t})\r\n// \t\t);\r\n// };\r\n\r\n// /**\r\n//  * Register User: registerUser()\r\n//  * Note this is being exported as registerUser const in App.js\r\n//  * @param userData\r\n//  * @param history\r\n//  * @return {function(*)}\r\n//  */\r\n// export const registerUser =  ( userData, history ) => dispatch => {\r\n// \t/**\r\n// \t * axios.post() makes a post request at 'http://localhost:5000/api/users/register',\r\n// \t * which in turn will will call the router.post( '/register'..) function in node js backend,\r\n// \t * which will check validation and on no errors will register the user and save it into database\r\n// \t * router.post( '/register'..) returns a new user object which will be available in result.data\r\n// \t * accessible in then().\r\n// \t * And if there will be any errors it will be availablea in err.response.data down below.\r\n// \t * Note that we didn't have to prefix 'http://localhost:5000' in the url down below, because\r\n// \t * we have set proxy value in package.json to 'http://localhost:5000'.\r\n// \t * We set the state of the errors object to the new error object that we receive from err.response.data\r\n// \t * If on successful registration, inside then(), history.push( '/login' ) will redirect the user to the login page.\r\n// \t */\r\n// \taxios.post( '/api/users/register', userData, { withCredentials: true } )\r\n// \t\t.then( res => history.push( `/verifyEmail?email=${res.data.email}` ) )\r\n// \t\t.catch( ( err ) => dispatch( {\r\n// \t\t\ttype: GET_ERRORS,\r\n// \t\t\tpayload: err.response.data\r\n// \t\t} ) )\r\n\r\n// };\r\n\r\n// // /**\r\n// //  * Verify Email Token\r\n// //  * @param userData\r\n// //  * @param history\r\n// //  * @return {function(*)}\r\n// //  */\r\n// // export const verifyEmailToken =  ( userData, history ) => dispatch => {\r\n\r\n// // \taxios.post( '/api/users/verifyRegistrationEmail', userData, { withCredentials: true } )\r\n// // \t\t.then( res => history.push( '/login?email_verified=true' ) )\r\n// // \t\t.catch( ( err ) => dispatch( {\r\n// // \t\t\ttype: GET_ERRORS,\r\n// // \t\t\tpayload: err.response.data\r\n// // \t\t} ) )\r\n\r\n// // };\r\n\r\n// /**\r\n// //  * Send reset password email\r\n// //  * @param userData\r\n// //  * @return {function(*)}\r\n//  */\r\n// // export const sendResetPassEmail =  ( userData, history ) => dispatch => {\r\n\r\n// // \taxios.post( '/api/users/sendResetPassEmail', userData, { withCredentials: true } )\r\n// // \t\t.then( res => history.push( '/success-page?reset_pass_email_sent=success' ) )\r\n// // \t\t.catch( ( err ) => dispatch( {\r\n// // \t\t\ttype: GET_ERRORS,\r\n// // \t\t\tpayload: err.response.data\r\n// // \t\t} ) )\r\n// // };\r\n\r\n// // /**\r\n// //  * Resend verification Email\r\n// //  * @param userData\r\n// //  * @return {function(*)}\r\n// //  */\r\n// // export const resendVerificationEmail =  ( userData, history ) => dispatch => {\r\n\r\n// // \taxios.post( '/api/users/resendVerificationEmail', userData, { withCredentials: true } )\r\n// // \t\t.then( res => history.push( `/verifyEmail?email=${res.data.email}` ) )\r\n// // \t\t.catch( ( err ) => dispatch( {\r\n// // \t\t\ttype: GET_ERRORS,\r\n// // \t\t\tpayload: err.response.data\r\n// // \t\t} ) )\r\n\r\n// // };\r\n\r\n// // /**\r\n// //  * Reset password after verifying the token received.\r\n// //  * @param userData\r\n// //  * @param history\r\n// //  * @return {function(*)}\r\n// //  */\r\n// // export const resetPassUsingToken =  ( userData, history ) => dispatch => {\r\n\r\n// // \taxios.post( '/api/users/resetPassword', userData, { withCredentials: true } )\r\n// // \t\t.then( res => history.push( '/success-page?password_reset=success' ) )\r\n// // \t\t.catch( ( err ) => dispatch( {\r\n// // \t\t\ttype: GET_ERRORS,\r\n// // \t\t\tpayload: err.response.data\r\n// // \t\t} ) )\r\n\r\n// // };\r\n\r\n// // Login - Get User Token. This is loginUser() Action\r\n// export const loginUser = ( userData, history ) => dispatch => {\r\n\r\n// \taxios.post( '/api/users/login', userData )\r\n// \t\t.then( ( result ) => {\r\n// \t\t\t/**\r\n// \t\t\t * Once you get the response , save the data received from result.data to localStorage\r\n// \t\t\t * We are using object destructuring here, below code is equivalent to const token = result.data.token\r\n// \t\t\t */\r\n// \t\t\tconst { token } = result.data;\r\n\r\n// \t\t\t// Store token in localStorage\r\n// \t\t\tlocalStorage.setItem( 'jwtToken', token );\r\n\r\n// \t\t\t// Set token to Auth Header using a custom function setAuthToken\r\n// \t\t\tsetAuthToken( token );\r\n\r\n// \t\t\t// Use jwt-decode to decode the auth token and get the user data from it( install jwt-decode in clients dir )\r\n// \t\t\tconst decoded = jwt_decode( token );\r\n\r\n// \t\t\t// Set current user\r\n// \t\t\tdispatch( setCurrentUser( decoded ) );\r\n\r\n// \t\t\t// Once he is logged in send him to dashboard\r\n// \t\t\thistory.push( '/dashboard' );\r\n// \t\t} )\r\n// \t\t.catch( ( err ) => dispatch( {\r\n// \t\t\ttype: GET_ERRORS,\r\n// \t\t\tpayload: err.response.data\r\n// \t\t} ) );\r\n// };\r\n\r\n// // Login with Facebook- Get User Token.\r\n// export const loginWithFacebook = ( userData, history ) => dispatch => {\r\n\r\n// \taxios.post( '/api/users/loginViaFacebook', userData )\r\n// \t\t.then( ( result ) => {\r\n// \t\t\t/**\r\n// \t\t\t * Once you get the response , save the data received from result.data to localStorage\r\n// \t\t\t * We are using object destructuring here, below code is equivalent to const token = result.data.token\r\n// \t\t\t */\r\n// \t\t\tconst { token } = result.data;\r\n\r\n// \t\t\t// Store token in localStorage\r\n// \t\t\tlocalStorage.setItem( 'jwtToken', token );\r\n\r\n// \t\t\t// Set token to Auth Header using a custom function setAuthToken\r\n// \t\t\tsetAuthToken( token );\r\n\r\n// \t\t\t// Use jwt-decode to decode the auth token and get the user data from it( install jwt-decode in clients dir )\r\n// \t\t\tconst decoded = jwt_decode( token );\r\n\r\n\r\n// \t\t\t// Set current user\r\n// \t\t\tdispatch( setCurrentUser( decoded ) );\r\n\r\n// \t\t\t// Once he is logged in send him to dashboard\r\n// \t\t\thistory.push( '/dashboard' );\r\n// \t\t} )\r\n// \t\t.catch( ( err ) => dispatch( {\r\n// \t\t\ttype: GET_ERRORS,\r\n// \t\t\tpayload: err.response.data\r\n// \t\t} ) );\r\n// };\r\n\r\n// // Login with Google- Get User Token.\r\n// export const loginWithGoogle = ( userData, history ) => dispatch => {\r\n\r\n// \taxios.post( '/api/users/loginViaGoogle', userData )\r\n// \t\t.then( ( result ) => {\r\n// \t\t\t/**\r\n// \t\t\t * Once you get the response , save the data received from result.data to localStorage\r\n// \t\t\t * We are using object destructuring here, below code is equivalent to const token = result.data.token\r\n// \t\t\t */\r\n// \t\t\tconst { token } = result.data;\r\n\r\n// \t\t\t// Store token in localStorage\r\n// \t\t\tlocalStorage.setItem( 'jwtToken', token );\r\n\r\n// \t\t\t// Set token to Auth Header using a custom function setAuthToken\r\n// \t\t\tsetAuthToken( token );\r\n\r\n// \t\t\t// Use jwt-decode to decode the auth token and get the user data from it( install jwt-decode in clients dir )\r\n// \t\t\tconst decoded = jwt_decode( token );\r\n\r\n// \t\t\t// Set current user\r\n// \t\t\tdispatch( setCurrentUser( decoded ) );\r\n\r\n// \t\t\t// Once he is logged in send him to dashboard\r\n// \t\t\thistory.push( '/dashboard' );\r\n// \t\t} )\r\n// \t\t.catch( ( err ) => dispatch( {\r\n// \t\t\ttype: GET_ERRORS,\r\n// \t\t\tpayload: err.response.data\r\n// \t\t} ) );\r\n// };\r\n\r\n// // Set logged in user\r\n// export const setCurrentUser = ( decoded ) => {\r\n// \treturn {\r\n// \t\ttype: SET_CURRENT_USER,\r\n// \t\tpayload: decoded\r\n// \t}\r\n// };\r\n\r\n\r\n\r\n// // Log User Out\r\n// export const logoutUser = () => dispatch => {\r\n// \t// Remove token from localStorage\r\n// \tlocalStorage.removeItem( 'jwtToken' );\r\n\r\n// \t// When we pass the token value as false, setAuthToken() removes the Authorization token from the header of http request because user is logged out,\r\n// \tsetAuthToken( false );\r\n\r\n// \t// Set the current user to an empty object, which will set the isAuthenticated state of redux store to false.\r\n// \tdispatch( setCurrentUser( {} ) );\r\n// };\r\n\r\n// // Update user as a vendor\r\n// export const getCurrentUser = ( auth = ''  ) => dispatch => {\r\n// \taxios\r\n// \t\t.get('/api/users/current')\r\n// \t\t.then( res => dispatch({\r\n// \t\t\t\ttype: SET_CURRENT_USER,\r\n// \t\t\t\tpayload: res.data\r\n// \t\t\t})\r\n// \t\t)\r\n// \t\t.catch(err =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: GET_ERRORS,\r\n// \t\t\t\tpayload: err.response.data\r\n// \t\t\t})\r\n// \t\t);\r\n// };\r\n// //change user password\r\n// export const changePassword = ( userData )=> dispatch =>{\r\n//     axios.post( '/api/users/changePassword/', userData )\r\n//         .then( res => dispatch({\r\n//                 type: GET_USER_DATA,\r\n//                 payload: res.data\r\n//             })\r\n//         )\r\n//         .catch(err =>\r\n//             dispatch({\r\n//                 type: GET_ERRORS,\r\n//                 payload: err.response.data\r\n//             })\r\n//         );\r\n\r\n// };\r\n\r\n// // Get User List by PageNo\r\n// export const getUserListByPageNo = ( pageNo ) => dispatch => {\r\n// \taxios\r\n// \t\t.get( `/api/users/listUsers/${pageNo}` )\r\n// \t\t.then( res => dispatch({\r\n// \t\t\t\ttype: GET_USERS,\r\n// \t\t\t\tpayload: res.data\r\n// \t\t\t})\r\n// \t\t)\r\n// \t\t.catch(err =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: GET_ERRORS,\r\n// \t\t\t\tpayload: err.response.data\r\n// \t\t\t})\r\n// \t\t);\r\n// };\r\n\r\n// // Get user by UserId\r\n// export const getUserByUserId = ( userId ) => dispatch => {\r\n// \taxios\r\n// \t\t.get( `/api/users/getUserByUserId/${userId}` )\r\n// \t\t.then( res => dispatch({\r\n// \t\t\t\ttype: SET_CURRENT_USER,\r\n// \t\t\t\tpayload: res.data\r\n// \t\t\t})\r\n// \t\t)\r\n// \t\t.catch(err =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: GET_ERRORS,\r\n// \t\t\t\tpayload: err.response.data\r\n// \t\t\t})\r\n// \t\t);\r\n// };\r\n\r\n\r\n// export const updateUser = ( userObj ) => dispatch => {\r\n// \taxios\r\n// \t\t.post( '/api/users/updateUser/', userObj )\r\n// \t\t.then( res => dispatch({\r\n// \t\t\t\ttype: GET_USER,\r\n// \t\t\t\tpayload: res.data\r\n// \t\t\t})\r\n// \t\t)\r\n// \t\t.catch(err =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: GET_ERRORS,\r\n// \t\t\t\tpayload: err.response.data\r\n// \t\t\t})\r\n// \t\t);\r\n\r\n// \tdispatch({\r\n// \t\ttype: GET_USER,\r\n// \t\tpayload: userObj\r\n// \t})\r\n// };\r\n\r\n// /**\r\n//  * Get all the Users Data\r\n//  * NOte that we are passing the userType and the csrf token to ensure this is protected\r\n//  *\r\n//  * @return {function(*)}\r\n//  */\r\n// export const getAllUsers = ( userType ) => dispatch => {\r\n// \taxios\r\n// \t\t.get( `/api/users/getAllUsers/${userType}` )\r\n// \t\t.then( res => dispatch({\r\n// \t\t\t\ttype: GET_USERS,\r\n// \t\t\t\tpayload: res.data\r\n// \t\t\t})\r\n// \t\t)\r\n// \t\t.catch(err =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: GET_ERRORS,\r\n// \t\t\t\tpayload: err.response.data\r\n// \t\t\t})\r\n// \t\t);\r\n// };\r\n\r\n\r\n// export const yourUser = ( userObj ) => dispatch => {\r\n// \tdispatch({\r\n// \t\ttype: SET_CURRENT_USER,\r\n// \t\tpayload: userObj\r\n// \t})\r\n// };\r\n\r\n// // Get all user Count\r\n// export const getUserCount = () => dispatch => {\r\n// \taxios\r\n// \t\t.get('/api/users/getUserCount')\r\n// \t\t.then( res => dispatch({\r\n// \t\t\t\ttype: GET_USER_COUNT,\r\n// \t\t\t\tpayload: res.data\r\n// \t\t\t})\r\n// \t\t)\r\n// \t\t.catch(err =>\r\n// \t\t\tdispatch({\r\n// \t\t\t\ttype: GET_ERRORS,\r\n// \t\t\t\tpayload: err.response.data\r\n// \t\t\t})\r\n// \t\t);\r\n// };\r\n\r\n// // class Auth {\r\n// //   constructor() {\r\n// //     this.authenticated = false;\r\n// //   }\r\n\r\n// //   login(cb) {\r\n// //     this.authenticated = true\r\n// //     cb();\r\n// //   }\r\n\r\n// //   logout(cb) {\r\n// //     this.authenticated = false\r\n// //     cb();\r\n// //   }\r\n\r\n// //   isAuthenticated() {\r\n// //     return this.authenticated;\r\n// //   }\r\n// // }\r\n\r\n// // export default new Auth();\r\n\r\n\r\n\r\n// // import axios from \"axios\";\r\n// // import setauthToken from \"../utils/setauthToken\";\r\n// // import jwt_decode from \"jwt-decode\";\r\n\r\n// // import { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n\r\n// // // Register User\r\n// // export const registerUser = (userData, history) => dispatch => {\r\n// //   axios\r\n// //     .post(\"/api/users/register\", userData)\r\n// //     .then(res => history.push(\"/login\"))\r\n// //     .catch(err =>\r\n// //       dispatch({\r\n// //         type: GET_ERRORS,\r\n// //         payload: err.response.data\r\n// //       })\r\n// //     );\r\n// // };\r\n\r\n// // // Login - get user token\r\n// // export const loginUser = userData => dispatch => {\r\n// //   axios\r\n// //     .post(\"/api/users/login\", userData)\r\n// //     .then(res => {\r\n// //       // Save to localStorage\r\n\r\n// //       // Set token to localStorage\r\n// //       const { token } = res.data;\r\n// //       localStorage.setItem(\"jwtToken\", token);\r\n// //       // Set token to auth header\r\n// //       setauthToken(token);\r\n// //       // Decode token to get user data\r\n// //       const decoded = jwt_decode(token);\r\n// //       // Set current user\r\n// //       dispatch(setCurrentUser(decoded));\r\n// //     })\r\n// //     .catch(err =>\r\n// //       dispatch({\r\n// //         type: GET_ERRORS,\r\n// //         payload: err.response.data\r\n// //       })\r\n// //     );\r\n// // };\r\n\r\n// // // Set logged in user\r\n// // export const setCurrentUser = decoded => {\r\n// //   return {\r\n// //     type: SET_CURRENT_USER,\r\n// //     payload: decoded\r\n// //   };\r\n// // };\r\n\r\n// // // User loading\r\n// // export const setUserLoading = () => {\r\n// //   return {\r\n// //     type: USER_LOADING\r\n// //   };\r\n// // };\r\n\r\n// // // Log user out\r\n// // export const logoutUser = () => dispatch => {\r\n// //   // Remove token from local storage\r\n// //   localStorage.removeItem(\"jwtToken\");\r\n// //   // Remove auth header for future requests\r\n// //   setauthToken(false);\r\n// //   // Set current user to empty object {} which will set isauthenticated to false\r\n// //   dispatch(setCurrentUser({}));\r\n// // };","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isEmpty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: {},\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: !isEmpty(action.payload),\r\n        user: action.payload\r\n      };\r\n    case USER_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// import { SET_CURRENT_USER, GET_USER_COUNT, CSRF_TOKEN, GET_USERS, GET_USER, GET_USER_DATA } from '.../actions/types';\r\n// import isEmpty from '../validation/is-empty';\r\n\r\n// const initialState = {\r\n// \tisAuthenticated: false,\r\n// \tuser: {},\r\n// \tsingleUser: {},\r\n// \tuserList: [],\r\n// \tcsrfToken: null,\r\n// \tuserCount: null\r\n// };\r\n\r\n// export default function ( state = initialState, action ) {\r\n// \t/**\r\n// \t * If action.payload is filled with the user, that mean we should be authenticated.\r\n// \t * So the value of isAuthenticated will be true is action.payload has the value, false otherwise.\r\n// \t * isEmpty() is our custom function defined in validation/isEmpty.js\r\n// \t */\r\n// \tswitch ( action.type ) {\r\n// \t\tcase SET_CURRENT_USER:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tisAuthenticated: ! isEmpty( action.payload ),\r\n// \t\t\t\tuser: action.payload\r\n// \t\t\t};\r\n// \t\tcase GET_USER_COUNT:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tuserCount: action.payload\r\n// \t\t\t};\r\n// \t\tcase CSRF_TOKEN:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tcsrfToken: action.payload\r\n// \t\t\t};\r\n// \t\tcase GET_USERS:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tuserList: action.payload\r\n// \t\t\t};\r\n// \t\tcase GET_USER:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tsingleUser: action.payload\r\n// \t\t\t};\r\n//         case GET_USER_DATA:\r\n//             return{\r\n//                 ...state,\r\n//                 userData:action.payload\r\n\r\n//             };\r\n// \t\tdefault: return state;\r\n// \t}\r\n// }\r\n\r\n// // import { SET_CURRENT_USER, USER_LOADING } from \".../actions/types\";\r\n\r\n// // const isEmpty = require(\"is-empty\");\r\n\r\n// // const initialState = {\r\n// //   isAuthenticated: false,\r\n// //   user: {},\r\n// //   loading: false\r\n// // };\r\n\r\n// // export default function(state = initialState, action) {\r\n// //   switch (action.type) {\r\n// //     case SET_CURRENT_USER:\r\n// //       return {\r\n// //         ...state,\r\n// //         isAuthenticated: !isEmpty(action.payload),\r\n// //         user: action.payload\r\n// //       };\r\n// //     case USER_LOADING:\r\n// //       return {\r\n// //         ...state,\r\n// //         loading: true\r\n// //       };\r\n// //     default:\r\n// //       return state;\r\n// //   }\r\n// // }","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// import { GET_ERRORS } from \".../actions/types\";\r\n\r\n// const initialState = {};\r\n\r\n\r\n// export default function(state = initialState, action) {\r\n//   switch (action.type) {\r\n//     case GET_ERRORS:\r\n//       return action.payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer\r\n});\r\n\r\n// import { combineReducers } from \"redux\";\r\n// import authReducer from \"./authReducer\";\r\n// import errorReducer from \"./errorReducer\";\r\n\r\n// export default combineReducers({\r\n//   auth: authReducer,\r\n//   errors: errorReducer\r\n// });","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) ||\r\n      compose\r\n  )\r\n);\r\n\r\nexport default store;","import React, { Component } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nclass Landing extends Component {\r\n  render() {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n}\r\nexport default Landing;","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all competitions\r\n  getCompetitions: function() {\r\n    return axios.get(\"/api/competitions\");\r\n  },\r\n  // Gets the competition with the given id\r\n  getCompetition: function(id) {\r\n    return axios.get(\"/api/competitions\" + id);\r\n  },\r\n  // Deletes the competition with the given id\r\n  deleteCompetition: function(id) {\r\n    return axios.delete(\"/api/competitions/\" + id);\r\n  },\r\n  // Saves a competition to the database\r\n  saveCompetition: function(competitionData) {\r\n    return axios.post(\"/api/competitions\", competitionData);\r\n  },\r\n  // Gets all horses\r\n  getHorses: function() {\r\n    return axios.get(\"/api/horses\");\r\n  },\r\n  // Gets the horse with the unique name\r\n  getHorse: function(uniqueName) {\r\n    return axios.get(\"/api/horses\" + uniqueName);\r\n  },\r\n  // Deletes the horse with the given name\r\n  deleteHorse: function(uniqueName) {\r\n    return axios.delete(\"/api/horses/\" + uniqueName);\r\n  },\r\n  // Saves a horse to the database\r\n  saveHorse: function(horseData) {\r\n    return axios.post(\"/api/horses\", horseData);\r\n  },\r\n   // Gets all users\r\n  getUsers: function() {\r\n    return axios.get(\"/api/users\");\r\n  },\r\n  // Gets the user with the email\r\n  getUser: function(email) {\r\n    return axios.get(\"/api/users\" + email);\r\n  },\r\n  // Deletes the user with the email\r\n  deleteUser: function(email) {\r\n    return axios.delete(\"/api/users/\" + email);\r\n  },\r\n  // Saves a user to the database\r\n  saveUser: function(userData) {\r\n    return axios.post(\"/api/users\", userData);\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport \"../../assets/css/List.css\";\r\n\r\n// This file exports both the List and ListItem components\r\n\r\nexport function List({ children }) {\r\n  return (\r\n    <div className=\"list-overflow-container\">\r\n      <ul className=\"list-group\">{children}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ListItem({ children }) {\r\n  return <li className=\"list-group-item\">{children}</li>;\r\n}","import React, { useEffect, useState } from \"react\";\r\n// import * as NumericInput from \"./react-numeric-input\";\r\n// import DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\nimport API from \"../../utils/API\";\r\n\r\nexport function TextInput(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input className=\"form-control\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function FormBtn(props) {\r\n  return (\r\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\r\n      {props.children}\r\n    </button>\r\n  );\r\n}","/*!\n\n =========================================================\n * Material Dashboard React - v1.9.0 based on Material Dashboard - v1.2.0\n =========================================================\n\n * Product Page: http://www.creative-tim.com/product/material-dashboard-react\n * Copyright 2020 Creative Tim (http://www.creative-tim.com)\n * Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\n\n =========================================================\n\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n */\n\n// ##############################\n// // // Function that converts from hex color to rgb color\n// // // Example: input = #9c27b0 => output = 156, 39, 176\n// // // Example: input = 9c27b0 => output = 156, 39, 176\n// // // Example: input = #999 => output = 153, 153, 153\n// // // Example: input = 999 => output = 153, 153, 153\n// #############################\nconst hexToRgb = input => {\n  input = input + \"\";\n  input = input.replace(\"#\", \"\");\n  let hexRegex = /[0-9A-Fa-f]/g;\n  if (!hexRegex.test(input) || (input.length !== 3 && input.length !== 6)) {\n    throw new Error(\"input is not a valid hex color.\");\n  }\n  if (input.length === 3) {\n    let first = input[0];\n    let second = input[1];\n    let last = input[2];\n    input = first + first + second + second + last + last;\n  }\n  input = input.toUpperCase();\n  let first = input[0] + input[1];\n  let second = input[2] + input[3];\n  let last = input[4] + input[5];\n  return (\n    parseInt(first, 16) +\n    \", \" +\n    parseInt(second, 16) +\n    \", \" +\n    parseInt(last, 16)\n  );\n};\n\n// ##############################\n// // // Variables - Styles that are used on more than one component\n// #############################\n\nconst drawerWidth = 260;\n\nconst transition = {\n  transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\"\n};\n\nconst container = {\n  paddingRight: \"15px\",\n  paddingLeft: \"15px\",\n  marginRight: \"auto\",\n  marginLeft: \"auto\"\n};\n\nconst defaultFont = {\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  fontWeight: \"300\",\n  lineHeight: \"1.5em\"\n};\n\nconst primaryColor = [\"#9c27b0\", \"#ab47bc\", \"#8e24aa\", \"#af2cc5\"];\nconst warningColor = [\"#ff9800\", \"#ffa726\", \"#fb8c00\", \"#ffa21a\"];\nconst dangerColor = [\"#f44336\", \"#ef5350\", \"#e53935\", \"#f55a4e\"];\nconst successColor = [\"#4caf50\", \"#66bb6a\", \"#43a047\", \"#5cb860\"];\nconst infoColor = [\"#00acc1\", \"#26c6da\", \"#00acc1\", \"#00d3ee\"];\nconst roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\"];\nconst grayColor = [\n  \"#999\",\n  \"#777\",\n  \"#3C4858\",\n  \"#AAAAAA\",\n  \"#D2D2D2\",\n  \"#DDD\",\n  \"#b4b4b4\",\n  \"#555555\",\n  \"#333\",\n  \"#a9afbb\",\n  \"#eee\",\n  \"#e7e7e7\"\n];\nconst blackColor = \"#000\";\nconst whiteColor = \"#FFF\";\n\nconst boxShadow = {\n  boxShadow:\n    \"0 10px 30px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 4px 25px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\"\n};\n\nconst primaryBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(primaryColor[0]) +\n    \",.4)\"\n};\nconst infoBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(infoColor[0]) +\n    \",.4)\"\n};\nconst successBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(successColor[0]) +\n    \",.4)\"\n};\nconst warningBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(warningColor[0]) +\n    \",.4)\"\n};\nconst dangerBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(dangerColor[0]) +\n    \",.4)\"\n};\nconst roseBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(roseColor[0]) +\n    \",.4)\"\n};\n\nconst warningCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + warningColor[1] + \", \" + warningColor[2] + \")\",\n  ...warningBoxShadow\n};\nconst successCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + successColor[1] + \", \" + successColor[2] + \")\",\n  ...successBoxShadow\n};\nconst dangerCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + dangerColor[1] + \", \" + dangerColor[2] + \")\",\n  ...dangerBoxShadow\n};\nconst infoCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + infoColor[1] + \", \" + infoColor[2] + \")\",\n  ...infoBoxShadow\n};\nconst primaryCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + primaryColor[1] + \", \" + primaryColor[2] + \")\",\n  ...primaryBoxShadow\n};\nconst roseCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + roseColor[1] + \", \" + roseColor[2] + \")\",\n  ...roseBoxShadow\n};\n\nconst cardActions = {\n  margin: \"0 20px 10px\",\n  paddingTop: \"10px\",\n  borderTop: \"1px solid \" + grayColor[10],\n  height: \"auto\",\n  ...defaultFont\n};\n\nconst cardHeader = {\n  margin: \"-20px 15px 0\",\n  borderRadius: \"3px\",\n  padding: \"15px\"\n};\n\nconst card = {\n  display: \"inline-block\",\n  position: \"relative\",\n  width: \"100%\",\n  margin: \"25px 0\",\n  boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\n  borderRadius: \"3px\",\n  color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\n  background: whiteColor\n};\n\nconst defaultBoxShadow = {\n  border: \"0\",\n  borderRadius: \"3px\",\n  boxShadow:\n    \"0 10px 20px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 3px 20px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\",\n  padding: \"10px 0\",\n  transition: \"all 150ms ease 0s\"\n};\n\nconst title = {\n  color: grayColor[2],\n  textDecoration: \"none\",\n  fontWeight: \"300\",\n  marginTop: \"30px\",\n  marginBottom: \"25px\",\n  minHeight: \"32px\",\n  fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n  \"& small\": {\n    color: grayColor[1],\n    fontWeight: \"400\",\n    lineHeight: \"1\"\n  }\n};\n\nconst cardTitle = {\n  ...title,\n  marginTop: \"0\",\n  marginBottom: \"3px\",\n  minHeight: \"auto\",\n  \"& a\": {\n    ...title,\n    marginTop: \".625rem\",\n    marginBottom: \"0.75rem\",\n    minHeight: \"auto\"\n  }\n};\n\nconst cardSubtitle = {\n  marginTop: \"-.375rem\"\n};\n\nconst cardLink = {\n  \"& + $cardLink\": {\n    marginLeft: \"1.25rem\"\n  }\n};\n\nexport {\n  hexToRgb,\n  //variables\n  drawerWidth,\n  transition,\n  container,\n  boxShadow,\n  card,\n  defaultFont,\n  primaryColor,\n  warningColor,\n  dangerColor,\n  successColor,\n  infoColor,\n  roseColor,\n  grayColor,\n  blackColor,\n  whiteColor,\n  primaryBoxShadow,\n  infoBoxShadow,\n  successBoxShadow,\n  warningBoxShadow,\n  dangerBoxShadow,\n  roseBoxShadow,\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader,\n  cardActions,\n  cardHeader,\n  defaultBoxShadow,\n  title,\n  cardTitle,\n  cardSubtitle,\n  cardLink\n};\n","import {\n  blackColor,\n  whiteColor,\n  hexToRgb\n} from '../../material-dashboard-react.js';;\n\nconst cardStyle = {\n  card: {\n    border: \"0\",\n    marginBottom: \"30px\",\n    marginTop: \"30px\",\n    borderRadius: \"6px\",\n    color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\n    background: whiteColor,\n    width: \"100%\",\n    boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minWidth: \"0\",\n    wordWrap: \"break-word\",\n    fontSize: \".875rem\"\n  },\n  cardPlain: {\n    background: \"transparent\",\n    boxShadow: \"none\"\n  },\n  cardProfile: {\n    marginTop: \"30px\",\n    textAlign: \"center\"\n  },\n  cardChart: {\n    \"& p\": {\n      marginTop: \"0px\",\n      paddingTop: \"0px\"\n    }\n  }\n};\n\nexport default cardStyle;\n","import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n// @material-ui/icons\n\n// core components\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function Card(props) {\n  const classes = useStyles();\n  const { className, children, plain, profile, chart, ...rest } = props;\n  const cardClasses = classNames({\n    [classes.card]: true,\n    [classes.cardPlain]: plain,\n    [classes.cardProfile]: profile,\n    [classes.cardChart]: chart,\n    [className]: className !== undefined\n  });\n  return (\n    <div className={cardClasses} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nCard.propTypes = {\n  className: PropTypes.string,\n  plain: PropTypes.bool,\n  profile: PropTypes.bool,\n  chart: PropTypes.bool,\n  children: PropTypes.node\n};\n","const cardBodyStyle = {\n  cardBody: {\n    padding: \"0.9375rem 20px\",\n    flex: \"1 1 auto\",\n    WebkitBoxFlex: \"1\",\n    position: \"relative\"\n  },\n  cardBodyPlain: {\n    paddingLeft: \"5px\",\n    paddingRight: \"5px\"\n  },\n  cardBodyProfile: {\n    marginTop: \"15px\"\n  }\n};\n\nexport default cardBodyStyle;\n","import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n// @material-ui/icons\n\n// core components\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardBodyStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function CardBody(props) {\n  const classes = useStyles();\n  const { className, children, plain, profile, ...rest } = props;\n  const cardBodyClasses = classNames({\n    [classes.cardBody]: true,\n    [classes.cardBodyPlain]: plain,\n    [classes.cardBodyProfile]: profile,\n    [className]: className !== undefined\n  });\n  return (\n    <div className={cardBodyClasses} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nCardBody.propTypes = {\n  className: PropTypes.string,\n  plain: PropTypes.bool,\n  profile: PropTypes.bool,\n  children: PropTypes.node\n};\n","import { grayColor } from '../../material-dashboard-react.js';;\n\nconst cardFooterStyle = {\n  cardFooter: {\n    padding: \"0\",\n    paddingTop: \"10px\",\n    margin: \"0 15px 10px\",\n    borderRadius: \"0\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    display: \"flex\",\n    backgroundColor: \"transparent\",\n    border: \"0\"\n  },\n  cardFooterProfile: {\n    marginTop: \"-15px\"\n  },\n  cardFooterPlain: {\n    paddingLeft: \"5px\",\n    paddingRight: \"5px\",\n    backgroundColor: \"transparent\"\n  },\n  cardFooterStats: {\n    borderTop: \"1px solid \" + grayColor[10],\n    marginTop: \"20px\",\n    \"& svg\": {\n      position: \"relative\",\n      top: \"4px\",\n      marginRight: \"3px\",\n      marginLeft: \"3px\",\n      width: \"16px\",\n      height: \"16px\"\n    },\n    \"& .fab,& .fas,& .far,& .fal,& .material-icons\": {\n      fontSize: \"16px\",\n      position: \"relative\",\n      top: \"4px\",\n      marginRight: \"3px\",\n      marginLeft: \"3px\"\n    }\n  },\n  cardFooterChart: {\n    borderTop: \"1px solid \" + grayColor[10]\n  }\n};\n\nexport default cardFooterStyle;\n","import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n// @material-ui/icons\n\n// core components\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardFooterStyle\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function CardFooter(props) {\n  const classes = useStyles();\n  const { className, children, plain, profile, stats, chart, ...rest } = props;\n  const cardFooterClasses = classNames({\n    [classes.cardFooter]: true,\n    [classes.cardFooterPlain]: plain,\n    [classes.cardFooterProfile]: profile,\n    [classes.cardFooterStats]: stats,\n    [classes.cardFooterChart]: chart,\n    [className]: className !== undefined\n  });\n  return (\n    <div className={cardFooterClasses} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nCardFooter.propTypes = {\n  className: PropTypes.string,\n  plain: PropTypes.bool,\n  profile: PropTypes.bool,\n  stats: PropTypes.bool,\n  chart: PropTypes.bool,\n  children: PropTypes.node\n};\n","import {\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader,\n  whiteColor\n} from '../../material-dashboard-react.js';;\n\nconst cardHeaderStyle = {\n  cardHeader: {\n    padding: \"0.75rem 1.25rem\",\n    marginBottom: \"0\",\n    borderBottom: \"none\",\n    background: \"transparent\",\n    zIndex: \"3 !important\",\n    \"&$cardHeaderPlain,&$cardHeaderIcon,&$cardHeaderStats,&$warningCardHeader,&$successCardHeader,&$dangerCardHeader,&$infoCardHeader,&$primaryCardHeader,&$roseCardHeader\": {\n      margin: \"0 15px\",\n      padding: \"0\",\n      position: \"relative\",\n      color: whiteColor\n    },\n    \"&:first-child\": {\n      borderRadius: \"calc(.25rem - 1px) calc(.25rem - 1px) 0 0\"\n    },\n    \"&$warningCardHeader,&$successCardHeader,&$dangerCardHeader,&$infoCardHeader,&$primaryCardHeader,&$roseCardHeader\": {\n      \"&:not($cardHeaderIcon)\": {\n        borderRadius: \"3px\",\n        marginTop: \"-20px\",\n        padding: \"15px\"\n      }\n    },\n    \"&$cardHeaderStats svg\": {\n      fontSize: \"36px\",\n      lineHeight: \"56px\",\n      textAlign: \"center\",\n      width: \"36px\",\n      height: \"36px\",\n      margin: \"10px 10px 4px\"\n    },\n    \"&$cardHeaderStats i,&$cardHeaderStats .material-icons\": {\n      fontSize: \"36px\",\n      lineHeight: \"56px\",\n      width: \"56px\",\n      height: \"56px\",\n      textAlign: \"center\",\n      overflow: \"unset\",\n      marginBottom: \"1px\"\n    },\n    \"&$cardHeaderStats$cardHeaderIcon\": {\n      textAlign: \"right\"\n    }\n  },\n  cardHeaderPlain: {\n    marginLeft: \"0px !important\",\n    marginRight: \"0px !important\"\n  },\n  cardHeaderStats: {\n    \"& $cardHeaderIcon\": {\n      textAlign: \"right\"\n    },\n    \"& h1,& h2,& h3,& h4,& h5,& h6\": {\n      margin: \"0 !important\"\n    }\n  },\n  cardHeaderIcon: {\n    \"&$warningCardHeader,&$successCardHeader,&$dangerCardHeader,&$infoCardHeader,&$primaryCardHeader,&$roseCardHeader\": {\n      background: \"transparent\",\n      boxShadow: \"none\"\n    },\n    \"& i,& .material-icons\": {\n      width: \"33px\",\n      height: \"33px\",\n      textAlign: \"center\",\n      lineHeight: \"33px\"\n    },\n    \"& svg\": {\n      width: \"24px\",\n      height: \"24px\",\n      textAlign: \"center\",\n      lineHeight: \"33px\",\n      margin: \"5px 4px 0px\"\n    }\n  },\n  warningCardHeader: {\n    color: whiteColor,\n    \"&:not($cardHeaderIcon)\": {\n      ...warningCardHeader\n    }\n  },\n  successCardHeader: {\n    color: whiteColor,\n    \"&:not($cardHeaderIcon)\": {\n      ...successCardHeader\n    }\n  },\n  dangerCardHeader: {\n    color: whiteColor,\n    \"&:not($cardHeaderIcon)\": {\n      ...dangerCardHeader\n    }\n  },\n  infoCardHeader: {\n    color: whiteColor,\n    \"&:not($cardHeaderIcon)\": {\n      ...infoCardHeader\n    }\n  },\n  primaryCardHeader: {\n    color: whiteColor,\n    \"&:not($cardHeaderIcon)\": {\n      ...primaryCardHeader\n    }\n  },\n  roseCardHeader: {\n    color: whiteColor,\n    \"&:not($cardHeaderIcon)\": {\n      ...roseCardHeader\n    }\n  }\n};\n\nexport default cardHeaderStyle;\n","import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n// @material-ui/icons\n\n// core components\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardHeaderStyle\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function CardHeader(props) {\n  const classes = useStyles();\n  const { className, children, color, plain, stats, icon, ...rest } = props;\n  const cardHeaderClasses = classNames({\n    [classes.cardHeader]: true,\n    [classes[color + \"CardHeader\"]]: color,\n    [classes.cardHeaderPlain]: plain,\n    [classes.cardHeaderStats]: stats,\n    [classes.cardHeaderIcon]: icon,\n    [className]: className !== undefined\n  });\n  return (\n    <div className={cardHeaderClasses} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nCardHeader.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.oneOf([\n    \"warning\",\n    \"success\",\n    \"danger\",\n    \"info\",\n    \"primary\",\n    \"rose\"\n  ]),\n  plain: PropTypes.bool,\n  stats: PropTypes.bool,\n  icon: PropTypes.bool,\n  children: PropTypes.node\n};\n","import React from \"react\";\r\nimport \"../../assets/css/DeleteBtn.css\";\r\n\r\n// The ...props means, spread all of the passed props onto this element\r\n// That way we don't have to define them all individually\r\nfunction DeleteBtn(props) {\r\n  return (\r\n    <span className=\"delete-btn\" {...props} role=\"button\" tabIndex=\"0\">\r\n      ✗\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default DeleteBtn;","import React from \"react\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst styles = {\n  grid: {\n    margin: \"0 -15px !important\",\n    width: \"unset\"\n  }\n};\n\nconst useStyles = makeStyles(styles);\n\nexport default function GridContainer(props) {\n  const classes = useStyles();\n  const { children, ...rest } = props;\n  return (\n    <Grid container {...rest} className={classes.grid}>\n      {children}\n    </Grid>\n  );\n}\n\nGridContainer.propTypes = {\n  children: PropTypes.node\n};\n","import React from \"react\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst styles = {\n  grid: {\n    padding: \"0 15px !important\"\n  }\n};\n\nconst useStyles = makeStyles(styles);\n\nexport default function GridItem(props) {\n  const classes = useStyles();\n  const { children, ...rest } = props;\n  return (\n    <Grid item {...rest} className={classes.grid}>\n      {children}\n    </Grid>\n  );\n}\n\nGridItem.propTypes = {\n  children: PropTypes.node\n};\n","import React, { useState, useEffect, Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\nimport API from \"../../utils/API\";\r\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\r\nimport {  Button, Select, Input } from 'semantic-ui-react'\r\nimport {  Col,  Row } from \"../../components/Grid/index\";\r\nimport {  List, ListItem  } from \"../../components/List/List\";\r\nimport {  makeStyles } from \"@material-ui/core/styles\";\r\nimport {  TextInput,  TextArea, FormBtn   } from \"../../components/Forms/UserForm\";\r\nimport Card from \"../../components/Card/Card.js\";\r\nimport CardBody from \"../../components/Card/CardBody.js\";\r\nimport CardFooter from \"../../components/Card/CardFooter.js\";\r\nimport CardHeader from \"../../components/Card/CardHeader.js\";\r\nimport DeleteBtn from \"../../components/Buttons/DeleteBtn\";\r\nimport GridContainer from \"../../components/Grid/GridContainer.js\";\r\nimport GridItem from \"../../components/Grid/GridItem.js\";\r\nimport moment from \"moment\";\r\n\r\n\r\nexport default function Register() {\r\n  // interface State { inputValue: string; }\r\n\r\n\r\n  // Setting our component's initial state\r\n  const [users, setUsers] = useState([]);\r\n  const [formObject, setFormObject] = useState({});\r\n\r\n    const styles = {\r\n    cardCategoryWhite: {\r\n      color: \"rgba(255,255,255,.62)\",\r\n      margin: \"0\",\r\n      fontSize: \"14px\",\r\n      marginTop: \"0\",\r\n      marginBottom: \"0\"\r\n    },\r\n    cardTitleWhite: {\r\n      color: \"#FFFFFF\",\r\n      marginTop: \"0px\",\r\n      minHeight: \"auto\",\r\n      fontWeight: \"300\",\r\n      fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\r\n      marginBottom: \"3px\",\r\n      textDecoration: \"none\"\r\n    }\r\n  };\r\n\r\n  const useStyles = makeStyles(styles);\r\n\r\n  // Load all users and store them with setUsers\r\n  useEffect(() => {\r\n    loadUsers()\r\n  }, []);\r\n\r\n  // Loads all users and sets them to users\r\n  function loadUsers() {\r\n    API.getUsers()\r\n      .then(res =>\r\n        setUsers(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // Deletes a user from the database with a given id, then reloads users from the db\r\n  // function deleteUser(id) {\r\n  //   API.deleteUser(id)\r\n  //     .then(res => loadUsers())\r\n  //     .catch(err => console.log(err));\r\n  // }\r\n\r\n  // Handles updating component state when the user types into the input field\r\n  function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({ ...formObject,  [name]: value })\r\n  };\r\n\r\n  function handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    if (formObject.name && formObject.email) {\r\n      API.saveUser({\r\n          name: formObject.name,\r\n          email: formObject.email,\r\n          password: formObject.password,\r\n          date: new Date (this.date),\r\n        })\r\n        .then(res => loadUsers())\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n  const classes = useStyles();\r\n\r\n    // const [value, onChange] = useState(new Date());\r\n  \r\n    // const onDateChange=(newDate)=>{\r\n    //  //Your custom code here\r\n    //  props.handleOnclick(newDate);\r\n    //  onChange(newDate);\r\n    // };\r\n\r\n//     var curr = new Date();\r\n// curr.setDate(curr.getDate()+1);\r\n// var thisDate = curr.toISOString().substr(0,10);\r\n\r\n// curr.setDate(curr.getDate() + 3);\r\n// var thisDate = curr.toISOString().substr(0,10);\r\n  \r\n\r\n  return (\r\n  <div>\r\n    <Row>\r\n    <GridContainer>\r\n      <Col size=\"md-12\">\r\n      <form>\r\n        <Card>\r\n          <CardHeader color=\"primary\">\r\n            <GridItem xs={12} sm={12} md={12}>\r\n              <h4 className={classes.cardTitleWhite}>Add User</h4>\r\n              <p className={classes.cardCategoryWhite}>Register a New User! </p>\r\n            </GridItem>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <GridContainer>\r\n              <GridItem xs={12} sm={12} md={6}>\r\n              Name\r\n                <TextInput label=\"User Name\" id=\"user-name\" defaultValue=\"\" onChange={handleInputChange} name=\"name\" placeholder=\"User Name (required)\"  />\r\n              </GridItem>\r\n             \r\n              <GridItem xs={12} sm={12} md={6}>\r\n              Email\r\n                <TextInput label=\"User Email\" id=\"email\" type=\"string\" defaultValue=\"\" onChange={handleInputChange}   name=\"email\" placeholder=\"User Email\" />\r\n                \r\n              </GridItem>\r\n\r\n              <GridItem xs={12} sm={12} md={6}>\r\n              Password\r\n                <TextInput label=\"User Password\" id=\"password\" onChange={handleInputChange} name=\"password\" placeholder=\"Password (required)\" />\r\n              </GridItem>\r\n              \r\n                           \r\n            </GridContainer>\r\n          </CardBody>\r\n          <CardFooter>\r\n            <FormBtn color=\"primary\" disabled={!(formObject.name && formObject.email)} onClick={handleFormSubmit}>\r\n              Submit User\r\n            </FormBtn>\r\n          </CardFooter>\r\n        </Card>\r\n      </form>\r\n      </Col>\r\n\r\n      <Col size=\"md-12\">\r\n      <GridItem xs={12} sm={12} md={12}>\r\n        <h3>Users</h3>\r\n        {users.length ? (\r\n        <List>\r\n          {users.map(user => (\r\n          <ListItem key={user.email}>\r\n            <Link to={\"/admin/users/\" + user.email}>\r\n            <strong> {user.name} with {user.email} </strong>\r\n            </Link>\r\n            <DeleteBtn onClick={()=> deleteUser(user.emal)} />\r\n          </ListItem>\r\n          ))}\r\n        </List>\r\n        ) : (\r\n        <h3>No Results to Display</h3>\r\n        )}\r\n      </GridItem>\r\n\r\n      </Col>\r\n    </GridContainer>\r\n  </Row>\r\n  </div>\r\n  );\r\n  }\r\n\r\n// class Register extends Component {\r\n//   constructor() {\r\n//     super();\r\n//     this.state = {\r\n//       name: \"\",\r\n//       email: \"\",\r\n//       password: \"\",\r\n//       password2: \"\",\r\n//       errors: {}\r\n//     };\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     // If logged in and user navigates to Register page, should redirect them to dashboard\r\n//     if (this.props.auth.isAuthenticated) {\r\n//       this.props.history.push(\"/dashboard\");\r\n//     }\r\n//   }\r\n\r\n//   componentWillReceiveProps(nextProps) {\r\n//     if (nextProps.errors) {\r\n//       this.setState({\r\n//         errors: nextProps.errors\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   onChange = e => {\r\n//     this.setState({ [e.target.id]: e.target.value });\r\n//   };\r\n\r\n//   onSubmit = e => {\r\n//     e.preventDefault();\r\n//     const newUser = {\r\n//       name: this.state.name,\r\n//       email: this.state.email,\r\n//       password: this.state.password,\r\n//       password2: this.state.password2\r\n//     };\r\n\r\n//     this.props.registerUser(newUser, this.props.history);\r\n//   };\r\n\r\n//   render() {\r\n//     const { errors } = this.state;\r\n//     return (\r\n//       <div id=\"registerBg\">\r\n//         <h1 className=\"text-center pt-5 display-3 pb-5\">\r\n//           <img\r\n//             src=\"https://www.freeiconspng.com/uploads/pokemon-ball-png-1.png\"\r\n//             width=\"50\"\r\n//             alt=\"Horse ball png\"\r\n//           />\r\n//           <span\r\n//             style={{\r\n//               fontFamily: \"monospace\",\r\n//               fontWeight: \"bold\",\r\n//               letterSpacing: \"0.07em\"\r\n//             }}\r\n//           >\r\n//             {\" \"}\r\n//             Horse Encyclopedia{\" \"}\r\n//           </span>\r\n\r\n//           <img\r\n//             src=\"https://raw.githubusercontent.com/rozy97/pic/master/PinClipart.com_wiki-clipart_168408.png\"\r\n//             width=\"80\"\r\n//             alt=\"Horse ball png\"\r\n//           />\r\n//         </h1>\r\n\r\n//         <div className=\"box mt-5\">\r\n//           <form noValidate onSubmit={this.onSubmit} autoComplete=\"off\">\r\n//             <div className=\"inputBox\">\r\n//               <input\r\n//                 autoComplete=\"off\"\r\n//                 required\r\n//                 onChange={this.onChange}\r\n//                 value={this.state.name}\r\n//                 error={errors.name}\r\n//                 id=\"name\"\r\n//                 type=\"text\"\r\n//               />\r\n//               <label htmlFor=\"name\">Name</label>\r\n//               <span className=\"red-text\">{errors.name}</span>\r\n//             </div>\r\n//             <div className=\"inputBox\">\r\n//               <input\r\n//                 autoComplete=\"off\"\r\n//                 required\r\n//                 onChange={this.onChange}\r\n//                 value={this.state.email}\r\n//                 error={errors.email}\r\n//                 id=\"email\"\r\n//                 type=\"email\"\r\n//                 className={classnames(\"\", {\r\n//                   invalid: errors.email\r\n//                 })}\r\n//               />\r\n//               <label htmlFor=\"email\">Email</label>\r\n//               <span className=\"red-text\">{errors.email}</span>\r\n//             </div>\r\n//             <div className=\"inputBox\">\r\n//               <input\r\n//                 autoComplete=\"off\"\r\n//                 required\r\n//                 onChange={this.onChange}\r\n//                 value={this.state.password}\r\n//                 error={errors.password}\r\n//                 id=\"password\"\r\n//                 type=\"password\"\r\n//                 className={classnames(\"\", {\r\n//                   invalid: errors.password\r\n//                 })}\r\n//               />\r\n//               <label htmlFor=\"password\">Password</label>\r\n//               <span className=\"red-text\">{errors.password}</span>\r\n//             </div>\r\n//             <div className=\"inputBox\">\r\n//               <input\r\n//                 autoComplete=\"off\"\r\n//                 required\r\n//                 onChange={this.onChange}\r\n//                 value={this.state.password2}\r\n//                 error={errors.password2}\r\n//                 id=\"password2\"\r\n//                 type=\"password\"\r\n//                 className={classnames(\"\", {\r\n//                   invalid: errors.password2\r\n//                 })}\r\n//               />\r\n//               <label htmlFor=\"password2\">Confirm Password</label>\r\n//               <span className=\"red-text\">{errors.password2}</span>\r\n//             </div>\r\n//             <div className=\"\">\r\n//               <input type=\"submit\" name=\"submit\" value=\"Register\" />\r\n\r\n//               <p className=\"text-white mt-2\">\r\n//                 Already have an account? <Link to=\"/login\">Log in</Link>\r\n//               </p>\r\n//             </div>\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// Register.propTypes = {\r\n//   registerUser: PropTypes.func.isRequired,\r\n//   auth: PropTypes.string.isRequired,\r\n//   errors: PropTypes.string.isRequired\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   auth: state.auth,\r\n//   errors: state.errors\r\n// });\r\n\r\n// export default connect(\r\n//   mapStateToProps,\r\n//   { registerUser }\r\n// )(withRouter(Register));\r\n\r\n// // import React, { Component } from 'react'\r\n// // import axios from 'axios'\r\n\r\n// // class Register extends Component {\r\n// // \tconstructor() {\r\n// // \t\tsuper()\r\n// // \t\tthis.state = {\r\n// // \t\t\tusername: '',\r\n// // \t\t\tpassword: '',\r\n// // \t\t\tconfirmPassword: '',\r\n\r\n// // \t\t}\r\n// // \t\tthis.handleSubmit = this.handleSubmit.bind(this)\r\n// // \t\tthis.handleChange = this.handleChange.bind(this)\r\n// // \t}\r\n// // \thandleChange(event) {\r\n// // \t\tthis.setState({\r\n// // \t\t\t[event.target.name]: event.target.value\r\n// // \t\t})\r\n// // \t}\r\n// // \thandleSubmit(event) {\r\n// // \t\tconsole.log('register handleSubmit, username: ')\r\n// // \t\tconsole.log(this.state.username)\r\n// // \t\tevent.preventDefault()\r\n\r\n// // \t\t//request to server to add a new username/password\r\n// // \t\taxios.post('/user/', {\r\n// // \t\t\tusername: this.state.username,\r\n// // \t\t\tpassword: this.state.password\r\n// // \t\t})\r\n// // \t\t\t.then(response => {\r\n// // \t\t\t\tconsole.log(response)\r\n// // \t\t\t\tif (!response.data.errmsg) {\r\n// // \t\t\t\t\tconsole.log('successful register')\r\n// // \t\t\t\t\tthis.setState({ //redirect to login page\r\n// // \t\t\t\t\t\tredirectTo: '/login'\r\n// // \t\t\t\t\t})\r\n// // \t\t\t\t} else {\r\n// // \t\t\t\t\tconsole.log('username already taken')\r\n// // \t\t\t\t}\r\n// // \t\t\t}).catch(error => {\r\n// // \t\t\t\tconsole.log('register error: ')\r\n// // \t\t\t\tconsole.log(error)\r\n\r\n// // \t\t\t})\r\n// // \t}\r\n\r\n\r\n// // render() {\r\n// // \treturn (\r\n// // \t\t<div className=\"SignupForm\">\r\n// // \t\t\t<h4>Sign up</h4>\r\n// // \t\t\t<form className=\"form-horizontal\">\r\n// // \t\t\t\t<div className=\"form-group\">\r\n// // \t\t\t\t\t<div className=\"col-1 col-ml-auto\">\r\n// // \t\t\t\t\t\t<label className=\"form-label\" htmlFor=\"username\">Username</label>\r\n// // \t\t\t\t\t</div>\r\n// // \t\t\t\t\t<div className=\"col-3 col-mr-auto\">\r\n// // \t\t\t\t\t\t<input className=\"form-input\"\r\n// // \t\t\t\t\t\t\ttype=\"text\"\r\n// // \t\t\t\t\t\t\tid=\"username\"\r\n// // \t\t\t\t\t\t\tname=\"username\"\r\n// // \t\t\t\t\t\t\tplaceholder=\"Username\"\r\n// // \t\t\t\t\t\t\tvalue={this.state.username}\r\n// // \t\t\t\t\t\t\tonChange={this.handleChange}\r\n// // \t\t\t\t\t\t/>\r\n// // \t\t\t\t\t</div>\r\n// // \t\t\t\t</div>\r\n// // \t\t\t\t<div className=\"form-group\">\r\n// // \t\t\t\t\t<div className=\"col-1 col-ml-auto\">\r\n// // \t\t\t\t\t\t<label className=\"form-label\" htmlFor=\"password\">Password: </label>\r\n// // \t\t\t\t\t</div>\r\n// // \t\t\t\t\t<div className=\"col-3 col-mr-auto\">\r\n// // \t\t\t\t\t\t<input className=\"form-input\"\r\n// // \t\t\t\t\t\t\tplaceholder=\"password\"\r\n// // \t\t\t\t\t\t\ttype=\"password\"\r\n// // \t\t\t\t\t\t\tname=\"password\"\r\n// // \t\t\t\t\t\t\tvalue={this.state.password}\r\n// // \t\t\t\t\t\t\tonChange={this.handleChange}\r\n// // \t\t\t\t\t\t/>\r\n// // \t\t\t\t\t</div>\r\n// // \t\t\t\t</div>\r\n// // \t\t\t\t<div className=\"form-group \">\r\n// // \t\t\t\t\t<div className=\"col-7\"></div>\r\n// // \t\t\t\t\t<button\r\n// // \t\t\t\t\t\tclassName=\"btn btn-primary col-1 col-mr-auto\"\r\n// // \t\t\t\t\t\tonClick={this.handleSubmit}\r\n// // \t\t\t\t\t\ttype=\"submit\"\r\n// // \t\t\t\t\t>Sign up</button>\r\n// // \t\t\t\t</div>\r\n// // \t\t\t</form>\r\n// // \t\t</div>\r\n\r\n// // \t)\r\n// // }\r\n// // }\r\n\r\n// // export default Register","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n// import Jumping from \"../../assets/img/\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\"); // push user to dashboard when they login\r\n    }\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\n    this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div id=\"loginBg\">\r\n        <h1\r\n          className=\"text-center pt-5 display-3\"\r\n        >\r\n   \r\n          <span\r\n            style={{\r\n              fontFamily: \"monospace\",\r\n              fontWeight: \"bold\",\r\n              letterSpacing: \"0.07em\"\r\n              // fontStyle: \"italic\"\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Horse Encyclopedia{\" \"}\r\n          </span>\r\n\r\n        </h1>\r\n        <div className=\"box\">\r\n          <form noValidate onSubmit={this.onSubmit} autoComplete=\"off\">\r\n            <div className=\"inputBox\">\r\n              <input\r\n                autoComplete=\"off\"\r\n                required\r\n                onChange={this.onChange}\r\n                value={this.state.email}\r\n                error={errors.email}\r\n                id=\"email\"\r\n                type=\"email\"\r\n                className={classnames(\"\", {\r\n                  invalid: errors.email || errors.emailnotfound\r\n                })}\r\n              />\r\n              <label htmlFor=\"email\">Email</label>\r\n              <span className=\"red-text\">\r\n                {errors.email}\r\n                {errors.emailnotfound}\r\n              </span>\r\n            </div>\r\n            <div className=\"inputBox\">\r\n              <input\r\n                required\r\n                onChange={this.onChange}\r\n                value={this.state.password}\r\n                error={errors.password}\r\n                id=\"password\"\r\n                type=\"password\"\r\n                className={classnames(\"\", {\r\n                  invalid: errors.password || errors.passwordincorrect\r\n                })}\r\n              />\r\n              <label htmlFor=\"password\">Password</label>\r\n              <span className=\"red-text\">\r\n                {errors.password}\r\n                {errors.passwordincorrect}\r\n              </span>\r\n            </div>\r\n            <div className=\"m-auto\">\r\n              <input type=\"submit\" name=\"submit\" value=\"Login\" />\r\n              <p className=\"text-white mt-2\">\r\n                Don't have an account? <Link to=\"/register\">Register</Link>\r\n              </p>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.string.isRequired,\r\n  errors: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);\r\n\r\n// import React, { Component } from 'react'\r\n// import { Redirect } from 'react-router-dom'\r\n// import axios from 'axios'\r\n\r\n// class Login extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             username: '',\r\n//             password: '',\r\n//             redirectTo: null\r\n//         }\r\n//         this.handleSubmit = this.handleSubmit.bind(this)\r\n//         this.handleChange = this.handleChange.bind(this)\r\n  \r\n//     }\r\n\r\n//     handleChange(event) {\r\n//         this.setState({\r\n//             [event.target.name]: event.target.value\r\n//         })\r\n//     }\r\n\r\n//     handleSubmit(event) {\r\n//         event.preventDefault()\r\n//         console.log('handleSubmit')\r\n\r\n//         axios\r\n//             .post('/user/login', {\r\n//                 username: this.state.username,\r\n//                 password: this.state.password\r\n//             })\r\n//             .then(response => {\r\n//                 console.log('login response: ')\r\n//                 console.log(response)\r\n//                 if (response.status === 200) {\r\n//                     // update App.js state\r\n//                     this.props.updateUser({\r\n//                         loggedIn: true,\r\n//                         username: response.data.username\r\n//                     })\r\n//                     // update the state to redirect to home\r\n//                     this.setState({\r\n//                         redirectTo: '/'\r\n//                     })\r\n//                 }\r\n//             }).catch(error => {\r\n//                 console.log('login error: ')\r\n//                 console.log(error);\r\n                \r\n//             })\r\n//     }\r\n\r\n//     render() {\r\n//         if (this.state.redirectTo) {\r\n//             return <Redirect to={{ pathname: this.state.redirectTo }} />\r\n//         } else {\r\n//             return (\r\n//                 <div>\r\n//                     <h4>Login</h4>\r\n//                     <form className=\"form-horizontal\">\r\n//                         <div className=\"form-group\">\r\n//                             <div className=\"col-1 col-ml-auto\">\r\n//                                 <label className=\"form-label\" htmlFor=\"username\">Username</label>\r\n//                             </div>\r\n//                             <div className=\"col-3 col-mr-auto\">\r\n//                                 <input className=\"form-input\"\r\n//                                     type=\"text\"\r\n//                                     id=\"username\"\r\n//                                     name=\"username\"\r\n//                                     placeholder=\"Username\"\r\n//                                     value={this.state.username}\r\n//                                     onChange={this.handleChange}\r\n//                                 />\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"form-group\">\r\n//                             <div className=\"col-1 col-ml-auto\">\r\n//                                 <label className=\"form-label\" htmlFor=\"password\">Password: </label>\r\n//                             </div>\r\n//                             <div className=\"col-3 col-mr-auto\">\r\n//                                 <input className=\"form-input\"\r\n//                                     placeholder=\"password\"\r\n//                                     type=\"password\"\r\n//                                     name=\"password\"\r\n//                                     value={this.state.password}\r\n//                                     onChange={this.handleChange}\r\n//                                 />\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"form-group \">\r\n//                             <div className=\"col-7\"></div>\r\n//                             <button\r\n//                                 className=\"btn btn-primary col-1 col-mr-auto\"\r\n                               \r\n//                                 onClick={this.handleSubmit}\r\n//                                 type=\"submit\">Login</button>\r\n//                         </div>\r\n//                     </form>\r\n//                 </div>\r\n//             )\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default Login","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst privateRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      auth.isAuthenticated === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nprivateRoute.propTypes = {\r\n  auth: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(privateRoute);\r\n\r\n// import React from \"react\";\r\n// import { Route, Redirect } from \"react-router-dom\";\r\n// import auth from \"../.../actions/authActions\"\r\n\r\n// export const ProtectedRoute = ({\r\n//   component: Component, \r\n//   ...rest\r\n//   }) => {\r\n//     return (\r\n//       <Route \r\n//         {...rest} \r\n//         render= {props => {\r\n//           if (auth.isAuthenticated()) {\r\n//             return <Component {...props} />;\r\n//           } else {\r\n//             return (\r\n//               <Redirect \r\n//                 to={{\r\n//                   pathname: \"/\",\r\n//                   state: {\r\n//                     from: props.location\r\n//                   }\r\n//                 }}\r\n//               />\r\n//             );\r\n//           }\r\n//         }}\r\n//       />\r\n//     );\r\n// };\r\n  \r\n// // import { Route, Redirect } from \"react-router-dom\";\r\n// // import { connect } from \"react-redux\";\r\n// // import PropTypes from \"prop-types\";\r\n// // const PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n// //   <Route\r\n// //     {...rest}\r\n// //     render={props =>\r\n// //       auth.isAuthenticated === true ? (\r\n// //         <Component {...props} />\r\n// //       ) : (\r\n// //         <Redirect to=\"/login\" />\r\n// //       )\r\n// //     }\r\n// //   />\r\n// // );\r\n// // PrivateRoute.propTypes = {\r\n// //   auth: PropTypes.string.isRequired\r\n// // };\r\n// // const mapStateToProps = state => ({\r\n// //   auth: state.auth\r\n// // });\r\n// // export default connect(mapStateToProps)(PrivateRoute);","import {\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader,\n  grayColor\n} from '../../material-dashboard-react.js';;\n\nconst cardIconStyle = {\n  cardIcon: {\n    \"&$warningCardHeader,&$successCardHeader,&$dangerCardHeader,&$infoCardHeader,&$primaryCardHeader,&$roseCardHeader\": {\n      borderRadius: \"3px\",\n      backgroundColor: grayColor[0],\n      padding: \"15px\",\n      marginTop: \"-20px\",\n      marginRight: \"15px\",\n      float: \"left\"\n    }\n  },\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader\n};\n\nexport default cardIconStyle;\n","import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n// @material-ui/icons\n\n// core components\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardIconStyle\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function CardIcon(props) {\n  const classes = useStyles();\n  const { className, children, color, ...rest } = props;\n  const cardIconClasses = classNames({\n    [classes.cardIcon]: true,\n    [classes[color + \"CardHeader\"]]: color,\n    [className]: className !== undefined\n  });\n  return (\n    <div className={cardIconClasses} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nCardIcon.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.oneOf([\n    \"warning\",\n    \"success\",\n    \"danger\",\n    \"info\",\n    \"primary\",\n    \"rose\"\n  ]),\n  children: PropTypes.node\n};\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n      className=\"jumbotron\"\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import {\n  successColor,\n  whiteColor,\n  grayColor,\n  hexToRgb\n} from '../../material-dashboard-react.js';;\n\nconst rtlStyle = {\n  successText: {\n    color: successColor[0]\n  },\n  upArrowCardCategory: {\n    width: \"16px\",\n    height: \"16px\"\n  },\n  stats: {\n    color: grayColor[0],\n    display: \"inline-flex\",\n    fontSize: \"12px\",\n    lineHeight: \"22px\",\n    \"& svg\": {\n      top: \"4px\",\n      width: \"16px\",\n      height: \"16px\",\n      position: \"relative\",\n      marginRight: \"3px\",\n      marginLeft: \"3px\"\n    },\n    \"& .fab,& .fas,& .far,& .fal,& .material-icons\": {\n      top: \"4px\",\n      fontSize: \"16px\",\n      position: \"relative\",\n      marginRight: \"3px\",\n      marginLeft: \"3px\"\n    }\n  },\n  cardCategory: {\n    color: grayColor[0],\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    paddingTop: \"10px\",\n    marginBottom: \"0\"\n  },\n  cardCategoryWhite: {\n    color: \"rgba(\" + hexToRgb(whiteColor) + \",.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\",\n    \"& a\": {\n      color: whiteColor\n    }\n  },\n  cardTitle: {\n    color: grayColor[2],\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\",\n    \"& small\": {\n      color: grayColor[1],\n      fontWeight: \"400\",\n      lineHeight: \"1\"\n    }\n  },\n  cardTitleWhite: {\n    color: whiteColor,\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\",\n    \"& small\": {\n      color: grayColor[1],\n      fontWeight: \"400\",\n      lineHeight: \"1\"\n    }\n  }\n};\n\nexport default rtlStyle;\n","import { Col, Row} from \"../../components/Grid\";\r\nimport { faBaby } from '@fortawesome/free-solid-svg-icons'\r\nimport { faHorse } from '@fortawesome/free-solid-svg-icons'\r\nimport { faHorseHead } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPalette } from '@fortawesome/free-solid-svg-icons'\r\nimport { faRuler } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport API from \"../../utils/API\";\r\nimport Card from \"../../components/Card/Card.js\";\r\nimport CardHeader from \"../../components/Card/CardHeader.js\";\r\nimport CardIcon from \"../../components/Card/CardIcon.js\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport GridContainer from \"../../components/Grid/GridContainer.js\";\r\nimport GridItem from \"../../components/Grid/GridItem.js\";\r\nimport Jumbotron from \"../../components/Jumbotron/Jumbotron\";\r\nimport React, { useEffect, useState, Horseonent } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport styles from \"../../assets/jss/material-dashboard-react/views/rtlStyle.js\";\r\nimport Warning from \"@material-ui/icons/Warning\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction HorseDetail(props) {\r\n  const classes = useStyles();\r\n\r\n  const [horses, setHorses] = useState([])\r\n  const [formObject, setFormObject] = useState({})  \r\n\r\n  \r\n  // Load all horses and store them with setHorses\r\n  useEffect(() => {\r\n    loadHorses()\r\n  }, [])\r\n\r\n  // Loads all horses and sets them to horses\r\n  function loadHorses() {\r\n    API.getHorses()\r\n      .then(res => \r\n        setHorses(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  return (\r\n  <div>\r\n    \r\n    {horses.length ? (\r\n      <GridContainer>\r\n        {horses.map(horse => (\r\n          <GridItem xs={12} sm={6} md={3} key={horse.id}>\r\n           <Card >\r\n            <CardHeader color=\"warning\">\r\n              <FontAwesomeIcon color=\"warning\" icon={faHorse} /> \r\n              <p className={classes.cardCategory}>Horse</p>\r\n              <h3 className={classes.cardTitle}>{horse.uniqueName}</h3>\r\n            </CardHeader>            \r\n              <h4> <FontAwesomeIcon icon={faBaby} /> {horse.birthYear}</h4>\r\n              <h4> <FontAwesomeIcon icon={faRuler} /> {horse.height}</h4>\r\n              <h4> <FontAwesomeIcon icon={faHorseHead} /> {horse.breed}</h4>\r\n              <h4> <FontAwesomeIcon icon={faPalette} /> {horse.colour}</h4>\r\n           </Card>\r\n          </GridItem>\r\n     ))}\r\n        </GridContainer>\r\n           ) : (\r\n        <h3>No Results to Display</h3>\r\n        )}\r\n\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default HorseDetail;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport HorseDetail from \"../HorseDetail/HorseDetail\";\r\n\r\nclass Dashboard extends Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div className=\"row mt-3 mb-3\">\r\n            <div\r\n              style={{ display: \"flex\" }}\r\n              className=\"col s12 center-align display-flex\"\r\n            >\r\n              <h4 className=\"mr-auto mt-auto mb-auto\">\r\n                <b>Hey there,</b> {user.name.split(\" \")[0]}\r\n                <p className=\"flow-text grey-text text-darken-1\">\r\n                  You are logged into{\" \"}\r\n                  <span style={{ fontFamily: \"monospace\", fontSize: \"27px\" }}>\r\n                    POKEMON\r\n                  </span>{\" \"}\r\n                  ENCYCLOPEDIA 👏\r\n                </p>\r\n              </h4>\r\n              <button\r\n                style={{\r\n                  width: \"150px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  marginTop: \"1rem\"\r\n                }}\r\n                onClick={this.onLogoutClick}\r\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3 mt-auto mb-auto\"\r\n              >\r\n                Logout\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <HorseDetail />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);\r\n\r\n// import { Col, Row, Container } from \"../../components/Grid/\";\r\n// import { connect } from \"react-redux\";\r\n// import { faHorseHead } from '@fortawesome/free-solid-svg-icons'\r\n// import { faStar } from '@fortawesome/free-solid-svg-icons'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import { List, ListItem } from \"../../components/List/List\";\r\n// // import { logoutUser } from \"../.../actions/authActions\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\n// import Accessibility from \"@material-ui/icons/Accessibility\";\r\n// import AccessTime from \"@material-ui/icons/AccessTime\";\r\n// import API from \"../../utils/API\";\r\n// import ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\n// import BugReport from \"@material-ui/icons/BugReport\";\r\n// import Card from \"../../components/Card/Card.js\";\r\n// import CardBody from \"../../components/Card/CardBody.js\";\r\n// import CardFooter from \"../../components/Card/CardFooter.js\";\r\n// import CardHeader from \"../../components/Card/CardHeader.js\";\r\n// import CardIcon from \"../../components/Card/CardIcon.js\";\r\n// import ChartistGraph from \"react-chartist\";\r\n// import Cloud from \"@material-ui/icons/Cloud\";\r\n// import Code from \"@material-ui/icons/Code\";\r\n// import CustomTabs from \"../../components/CustomTabs/CustomTabs.js\";\r\n// import Danger from \"../../components/Typography/Danger.js\";\r\n// import DateRange from \"@material-ui/icons/DateRange\";\r\n// import DeleteBtn from \"../../components/Buttons/DeleteBtn\";\r\n// import FormatListNumbered from \"@material-ui/icons/FormatListNumbered\";\r\n// import GridContainer from \"../../components/Grid/GridContainer.js\";\r\n// import GridItem from \"../../components/Grid/GridItem.js\";\r\n// import Icon from \"@material-ui/core/Icon\";\r\n// import Jumbotron from \"../../components/Jumbotron/Jumbotron\";\r\n// import LocalOffer from \"@material-ui/icons/LocalOffer\";\r\n// import Moment from \"react-moment\";\r\n// import PropTypes from \"prop-types\";\r\n// import React, {useEffect, useState, Component} from \"react\";\r\n// import ReactDOM from 'react-dom';\r\n// import Store from \"@material-ui/icons/Store\";\r\n// import styles from \"../../assets/jss/material-dashboard-react/views/dashboardStyle.js\";\r\n// import Table from \"../../components/Table/Table.js\";\r\n// import Tasks from \"../../components/Tasks/Tasks.js\";\r\n// import Update from \"@material-ui/icons/Update\";\r\n// import Warning from \"@material-ui/icons/Warning\";\r\n\r\n// const useStyles = makeStyles(styles);\r\n\r\n//  export default function Dashboard() {\r\n//   const classes = useStyles();\r\n//   // Setting our component's initial state\r\n//   const [competitions, setCompetitions] = useState([])\r\n//   const [competition, setCompetition] = useState([])\r\n\r\n//   // Load all competitions and store them with setCompetitions\r\n//   useEffect(() => {\r\n//     loadCompetitions()\r\n//     getCompetition()\r\n//   }, [])\r\n\r\n//   // Loads all competitions and sets them to competitions\r\n//   function loadCompetitions() {\r\n//     API.getCompetitions()\r\n//       .then(res => \r\n//         setCompetitions(res.data)\r\n//       )\r\n//       .catch(err => console.log(err));\r\n//   };\r\n\r\n//   function getCompetition(id) {\r\n//     API.getCompetition(id)\r\n//     .then(res => \r\n//       setCompetition(res.data)\r\n//     )\r\n//     .catch(err => console.log(err));\r\n// };\r\n\r\n// // Setting our component's initial state\r\n//   const [horses, setHorses] = useState([])\r\n//   const [horse, setHorse] = useState([])\r\n\r\n//   // Load all competitions and store them with setCompetitions\r\n//   useEffect(() => {\r\n//     loadHorses()\r\n//     getHorse()\r\n//   }, [])\r\n\r\n//   // Loads all competitions and sets them to competitions\r\n//   function loadHorses() {\r\n//     API.getHorses()\r\n//       .then(res => \r\n//         setHorses(res.data)\r\n//       )\r\n//       .catch(err => console.log(err));\r\n//   };\r\n\r\n//   function getHorse(uniqueName) {\r\n//     API.getHorse(uniqueName)\r\n//     .then(res => \r\n//       setHorse(res.data)\r\n//     )\r\n//     .catch(err => console.log(err));\r\n// };\r\n\r\n//     return (\r\n//       <div>\r\n//         <GridContainer>\r\n\r\n//       <GridItem xs={12} sm={6} md={4}>\r\n//           <Card>\r\n//             <CardHeader color=\"warning\" stats icon>\r\n//               <CardIcon color=\"warning\">\r\n//                 <FontAwesomeIcon icon={faStar} />\r\n//               </CardIcon>\r\n//               <p className={classes.cardCategory}>Total Comps</p>\r\n//               <h3 className={classes.cardTitle}>\r\n//               {competitions.length} <small>competitions</small>\r\n//               </h3>\r\n//               <p className={classes.cardCategory}>Total Horses</p>\r\n//               <h3 className={classes.cardTitle}>\r\n//               {horses.length} <small>horses</small>\r\n//               </h3>\r\n//             </CardHeader>\r\n//             <CardFooter stats>\r\n//               <div className={classes.stats}>\r\n//               </div>\r\n//             </CardFooter>\r\n//           </Card>\r\n//         </GridItem>\r\n//         <GridItem xs={12} sm={6} md={4}>\r\n//           <Card>\r\n//                 <CardHeader color=\"warning\" stats icon>\r\n//               <CardIcon color=\"warning\">\r\n//                 <FontAwesomeIcon icon={faHorseHead} />\r\n//               </CardIcon>\r\n//               <p className={classes.cardCategory}>Horses</p>\r\n         \r\n//               <h3 className={classes.cardTitle}></h3>\r\n//             </CardHeader>\r\n//             <CardBody>\r\n//           {horses.length ? (\r\n//               <List>\r\n//             {horses.map(horse => (\r\n//                   <ListItem key={horse.uniqueName}>\r\n//                           {horse.uniqueName}\r\n//                   </ListItem>\r\n//                 ))}\r\n//               </List>\r\n//             ) : (\r\n//               <h3>No Results</h3>\r\n//             )}\r\n//             </CardBody>\r\n//             <CardFooter stats>\r\n            \r\n             \r\n//             </CardFooter>\r\n//           </Card>\r\n//         </GridItem>\r\n\r\n//         <GridItem xs={12} sm={6} md={4}>\r\n//           <Card>\r\n//             <CardHeader color=\"warning\" stats icon>\r\n//               <CardIcon color=\"warning\">\r\n//                 <FontAwesomeIcon icon={faStar} />\r\n//               </CardIcon>\r\n//               <p className={classes.cardCategory}>Last 5: Competitions List</p>\r\n//               <h3 className={classes.cardTitle}></h3>\r\n//               </CardHeader>\r\n//               <CardBody>\r\n//                {competitions.length ? (\r\n//               <List>\r\n//                 {competitions.slice(0, 5).map(competition => (\r\n//                   <ListItem key={competition._id}>\r\n//                           {competition.eventName} with {competition.horse}\r\n//                   </ListItem>\r\n//                 ))}\r\n//               </List>\r\n//             ) : (\r\n//               <h3>No Results</h3>\r\n//             )}\r\n//             </CardBody>\r\n//             <CardFooter stats>\r\n//            </CardFooter>\r\n//           </Card>\r\n//         </GridItem>\r\n\r\n//       </GridContainer>\r\n//       <GridContainer>\r\n//       <GridItem xs={12} sm={10} md={10}>\r\n//                 <Card>\r\n//            <CardHeader><Icon> addchart </Icon> Competitions by horse </CardHeader>\r\n//                     <CardBody>\r\n//                         <div id=\"chart\">\r\n//                         <iframe styles=\"background: #21313C;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);\" width=\"600\" height=\"600\" src=\"https://charts.mongodb.com/charts-project-0-ifizl/embed/charts?id=bdab3054-5ba1-47e5-b482-45e5e859c862&theme=light\"></iframe>\r\n//                         </div>\r\n//                     </CardBody>\r\n//                     <CardFooter></CardFooter>\r\n//                 </Card>\r\n//             </GridItem> \r\n\r\n//             <GridItem xs={12} sm={10} md={10}>\r\n//                 <Card>\r\n//                     <CardHeader><Icon> addchart </Icon> Placing by Discipline </CardHeader>\r\n//                     <CardBody>\r\n//                         <div id=\"chart\">\r\n//                         <iframe styles=\"background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);\" width=\"800\" height=\"600\" src=\"https://charts.mongodb.com/charts-project-0-ifizl/embed/charts?id=d2f1e98d-9b13-4e08-9ce8-d01c7a8869f0&theme=light\"></iframe> \r\n//                         </div>\r\n//                     </CardBody>\r\n//                     <CardFooter></CardFooter>\r\n//                 </Card>\r\n//             </GridItem>\r\n\r\n//             <GridItem xs={12} sm={10} md={10}>\r\n//                 <Card>\r\n//                     <CardHeader></CardHeader>\r\n//                     <CardBody>\r\n//                         <div id=\"chart\">\r\n//                         <iframe styles=\"background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);\" width=\"800\" height=\"600\" src=\"https://charts.mongodb.com/charts-project-0-ifizl/embed/charts?id=ef7be6d4-9043-4ed2-90c4-ac8576aae118&theme=light\"></iframe>\r\n//                         </div>\r\n//                     </CardBody>\r\n//                     <CardFooter></CardFooter>\r\n//                 </Card>\r\n//             </GridItem> \r\n//       </GridContainer>\r\n      \r\n//       <GridContainer>\r\n//         <GridItem xs={12} sm={12} md={12}>\r\n\r\n//         </GridItem>\r\n\r\n//         <GridItem xs={12} sm={12} md={12}>\r\n//           <Card>\r\n//             <CardHeader color=\"warning\">\r\n//               <h4 className={classes.cardTitle}>Competition Table</h4>\r\n//               <p className={classes.cardCategory}>\r\n//                 Competition List (All Horses)\r\n//               </p>\r\n//             </CardHeader>\r\n//             <CardBody>\r\n//               <Table\r\n//                 />\r\n//             </CardBody>\r\n//           </Card>\r\n//         </GridItem>\r\n        \r\n//         </GridContainer>\r\n//     </div>\r\n//   );\r\n// }","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport Landing from \"./layouts/Landing\";\r\nimport Register from \"./views/Register/Register\";\r\nimport Login from \"./views/Login/Login\";\r\nimport PrivateRoute from \"./views/PrivateRoute/PrivateRoute\";\r\nimport Dashboard from \"./views/Dashboard/Dashboard\";\r\n\r\nimport Horse from \"./views/HorseDetail/HorseDetail\";\r\n\r\n// // Check for token to keep user logged in\r\n// if (localStorage.jwtToken) {\r\n//   // Set auth token header auth\r\n//   const token = localStorage.jwtToken;\r\n//   setAuthToken(token);\r\n//   // Decode token and get user info and exp\r\n//   const decoded = jwt_decode(token);\r\n//   // Set user and isAuthenticated\r\n//   store.dispatch(setCurrentUser(decoded));\r\n//   // Check for expired token\r\n//   const currentTime = Date.now() / 1000; // to get in milliseconds\r\n//   if (decoded.exp < currentTime) {\r\n//     // Logout user\r\n//     store.dispatch(logoutUser());\r\n//     // Redirect to login\r\n//     window.location.href = \"./login\";\r\n//   }\r\n// }\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Switch>\r\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n              {/* <PrivateRoute\r\n                exact\r\n                path=\"/horse/:horseIndex\"\r\n                component={Horse}\r\n              />\r\n              <PrivateRoute\r\n                exact\r\n                path=\"/horse\"\r\n                component={() => <Redirect to=\"/dashboard\" />}\r\n              /> */}\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n// import React, { Component } from 'react';\r\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n// import { Provider } from 'react-redux';\r\n// import jwt_decode from 'jwt-decode';\r\n// import setAuthToken from './utils/setAuthToken';\r\n// import store from './store';\r\n\r\n// import { setCurrentUser, logoutUser } from \"../actions/authActions\";\r\n\r\n// import PrivateRoute from './components/common/PrivateRoute';\r\n// import Home from './components/Home';\r\n// // import { PrivateComponent } from \"./views/PrivateRoute/PrivateRoute\";\r\n// import Register from \"./views/Register/Register\";\r\n// import Login from \"./views/Login/Login\";\r\n// // import VerifyEmail from \"./components/auth/VerifyEmail\";\r\n// // import ForgotPassword from \"./components/auth/ForgotPassword\";\r\n// // import ResetPassword from \"./components/auth/ResetPassword\";\r\n// import { Landing } from \"./views/Landing/Landing\";\r\n// // import ResendVerificationEmail from \"./components/auth/ResendVerificationEmail\";\r\n// import Dashboard from \"./views/Dashboard/Dashboard\";\r\n\r\n\r\n// /**\r\n//  * To ensure the authenticate state stays true even on page reload, we do the following:\r\n//  * Check if the auth token exists in localStorage('jwtToken') , If it does mean user is logged in\r\n//  */\r\n// if ( localStorage.jwtToken ) {\r\n// \t/**\r\n// \t * Set Auth token header Authorization, setAuthToken is define in utils/setAuthToken,\r\n// \t * which provides the auth token stored in local storage to the header of http request.\r\n// \t */\r\n// \tsetAuthToken( localStorage.jwtToken );\r\n\r\n// \t// Decode the token( localStorage.jwtToken ) and get user info and exp\r\n// \tconst decoded = jwt_decode( localStorage.jwtToken );\r\n\r\n// \t/**\r\n// \t * Set user and isAuthenticated values in the redux store, using setCurrentUser() defined in\r\n// \t * authActions.js, which takes the decoded value of the token.\r\n// \t */\r\n// \tstore.dispatch( setCurrentUser( decoded ) );\r\n\r\n// \t/**\r\n// \t * Check if the token is expired\r\n// \t * decoded.exp contains the expiration timestamp of the token.\r\n// \t * So if the expiration time is less than the current time\r\n// \t * decoded.exp\r\n// \t * @type {number}\r\n// \t */\r\n// \tconst currentTime = Date.now() / 1000;\r\n// \tif ( decoded.exp < currentTime ) {\r\n// \t\tstore.dispatch( logoutUser() );\r\n\r\n// \t\t// Todo: Clear Current profile and redirect to login\r\n// \t\t// store.dispatch( clearCurrentProfile() );\r\n\r\n// \t\t// Redirects the user to login page when the token is expired and the user logs out.\r\n// \t\twindow.location.href = '/login';\r\n// \t}\r\n// }\r\n\r\n// class App extends Component {\r\n// \trender() {\r\n// \t\treturn (\r\n// \t\t\t// Provide provides the store to its child components inside of it.\r\n// \t\t\t<Provider store={ store }>\r\n// \t\t\t\t<Router>\r\n// \t\t\t\t\t<div>\r\n// \t\t\t\t\t\t<Route exact path=\"/\" component={ Home } />\r\n// \t\t\t\t\t\t<Route exact path=\"/register\" component={ Register } />\r\n// \t\t\t\t\t\t<Route exact path=\"/login\" component={ Login } />\r\n// \t\t\t\t\t\t{/* <Route exact path=\"/verifyEmail\" component={ VerifyEmail } />\r\n// \t\t\t\t\t\t<Route exact path=\"/forgot-password\" component={ ForgotPassword } />\r\n// \t\t\t\t\t\t<Route exact path=\"/resetPassword\" component={ ResetPassword } /> */}\r\n// \t\t\t\t\t\t<Route exact path=\"/landingPage\" component={ Landing } />\r\n// \t\t\t\t\t\t{/* <Route exact path=\"/resend-verification-email\" component={ResendVerificationEmail} /> */}\r\n// \t\t\t\t\t\t{/*Private Routes*/}\r\n// \t\t\t\t\t\t<Switch><PrivateRoute exact path=\"/dashboard\" component={ Dashboard } /></Switch>\r\n// \t\t\t\t\t\t<Switch><PrivateRoute exact path=\"/privateRoute\" component={ PrivateRoute } /></Switch>\r\n// \t\t\t\t\t</div>\r\n// \t\t\t\t</Router>\r\n// \t\t\t</Provider>\r\n// \t\t);\r\n// \t}\r\n// }\r\n\r\n// export default App;\r\n\r\n// // import React, { Component } from 'react';\r\n// // import ReactDOM from \"react-dom\";\r\n// // import Header from './components/Header/Header';\r\n// // import Footer from './components/Footer/Footer';\r\n// // import Landing from './views/Landing/Landing';\r\n// // import Register from './views/Register/Register';\r\n// // import Login from './views/Login/Login'\r\n// // import \"./styles.css\"\r\n\r\n// //   class App extends Component {\r\n// //   render() {\r\n// //     return (\r\n     \r\n// //         <Router>\r\n// //           <div className=\"App\">\r\n// //           {/* <Header /> */}\r\n// //             <Navbar />\r\n// //             <Route exact path=\"/\" component={Landing} />\r\n// //             <Route exact path=\"/register\" component={Register} />\r\n// //             <Route exact path=\"/login\" component={Login} />\r\n// //             <Switch>\r\n// //               <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n// //             </Switch>\r\n// //             {/* <Footer /> */}\r\n// //           </div>\r\n          \r\n// //         </Router>\r\n// //     );\r\n// //   }\r\n// // }\r\n// // export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// // import { createBrowserHistory } from \"history\";\r\n\r\n// import { Landing } from \"./views/Landing/Landing\";\r\n// import { AppLayout } from \"./layouts/layout\";\r\n// import { ProtectedRoute } from \"./views/PrivateRoute/PrivateRoute\";\r\n// import { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\n// // core components\r\n// // import Admin from \"./views/Admin/Admin\";\r\n// import \"./styles.css\";\r\n\r\n// import \"./assets/css/material-dashboard-react.css\";\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//     <Switch>\r\n//       <Route exact path= \"/\" component = {Landing} />\r\n//       <ProtectedRoute exact path=\"/app\" component = {AppLayout} />\r\n//       <Route path=\"*\" component={() => \"404 NOT FOUND\"} />\r\n//     </Switch>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(\r\n//   <BrowserRouter>\r\n//     <App />\r\n//   </BrowserRouter>, \r\n//   rootElement\r\n//   );\r\n\r\n// const hist = createBrowserHistory();\r\n\r\n// ReactDOM.render(\r\n//   <Router history={hist}>\r\n//     <Switch>\r\n//       <Route path=\"/admin\" component={Admin} />\r\n//       <Redirect from=\"/\" to=\"/admin/dashboard\" />\r\n//     </Switch>\r\n//   </Router>,\r\n//   document.getElementById(\"root\")\r\n// );\r\n"],"sourceRoot":""}